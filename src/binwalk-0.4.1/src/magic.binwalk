
# ----------------------------Archive Formats--------------------------------------

# POSIX tar archives
257     string          ustar\000         POSIX tar archive
!:mime  application/x-tar # encoding: posix
257     string          ustar\040\040\000 GNU tar archive
!:mime  application/x-tar # encoding: gnu

# MIPS archive (needs to go before regular portable archives)
#
0       string  =!<arch>\n__________E   MIPS archive
>20     string  U                       with MIPS Ucode members
>21     string  L                       with MIPSEL members
>21     string  B                       with MIPSEB members
>19     string  L                       and an EL hash table
>19     string  B                       and an EB hash table
>22     string  X                       -- out of date

# JAR archiver (.j), this is the successor to ARJ, not Java's JAR (which is essentially ZIP)
0xe     string  \x1aJar\x1b JAR (ARJ Software, Inc.) archive data
0       string  JARCS JAR (ARJ Software, Inc.) archive data


# ARJ archiver (jason@jarthur.Claremont.EDU)
0       leshort         0xea60          ARJ archive data
!:mime  application/x-arj
>5      byte            x               \b, v%d,
>8      byte            &0x04           multi-volume,
>8      byte            &0x10           slash-switched,
>8      byte            &0x20           backup,
>34     string          x               original name: %s,
>7      byte            0               os: MS-DOS 
>7      byte            1               os: PRIMOS
>7      byte            2               os: Unix
>7      byte            3               os: Amiga
>7      byte            4               os: Macintosh
>7      byte            5               os: OS/2
>7      byte            6               os: Apple ][ GS
>7      byte            7               os: Atari ST
>7      byte            8               os: NeXT
>7      byte            9               os: VAX/VMS
>3      byte            >0              %d]
# [JW] idarc says this is also possible
2       leshort         0xea60          ARJ archive data
>5      byte            x               \b, v%d,
>8      byte            &0x04           multi-volume,
>8      byte            &0x10           slash-switched,
>8      byte            &0x20           backup,
>34     string          x               original name: %s,
>7      byte            0               os: MS-DOS
>7      byte            1               os: PRIMOS
>7      byte            2               os: Unix
>7      byte            3               os: Amiga
>7      byte            4               os: Macintosh
>7      byte            5               os: OS/2
>7      byte            6               os: Apple ][ GS
>7      byte            7               os: Atari ST
>7      byte            8               os: NeXT
>7      byte            9               os: VAX/VMS
>3      byte            >0              %d]

# RAR archiver (Greg Roelofs, newt@uchicago.edu)
0	string		Rar!		RAR archive data [NSRL|RAR]

# HPACK archiver (Peter Gutmann, pgut1@cs.aukuni.ac.nz)
0	string		HPAK		HPACK archive data [NSRL|HPAK]

# JAM Archive volume format, by Dmitry.Kohmanyuk@UA.net
0	string		\351,\001JAM\		JAM archive, [NSRL|JAM]

# LHARC/LHA archiver (Greg Roelofs, newt@uchicago.edu)
2	string		-lh0-		LHarc 1.x archive data [lh0] [NSRL|LHA1]
2	string		-lh1-		LHarc 1.x archive data [lh1] [NSRL|LHA1]
2	string		-lz4-		LHarc 1.x archive data [lz4] [NSRL|LHA1]
2	string		-lz5-		LHarc 1.x archive data [lz5] [NSRL|LHA1]
#	[never seen any but the last; -lh4- reported in comp.compression:]
2	string		-lzs-		LHa 2.x? archive data [lzs] [NSRL|LHA2]
2	string		-lh\40-		LHa 2.x? archive data [lh ] [NSRL|LHA2]
2	string		-lhd-		LHa 2.x? archive data [lhd] [NSRL|LHA2]
2	string		-lh2-		LHa 2.x? archive data [lh2] [NSRL|LHA2]
2	string		-lh3-		LHa 2.x? archive data [lh3] [NSRL|LHA2]
2	string		-lh4-		LHa (2.x) archive data [lh4] [NSRL|LHA2]
2	string		-lh5-		LHa (2.x) archive data [lh5] [NSRL|LHA2]
2	string		-lh6-		LHa (2.x) archive data [lh6] [NSRL|LHA2]
2	string		-lh7-		LHa (2.x) archive data [lh7] [NSRL|LHA2]

# SQUISH archiver (Greg Roelofs, newt@uchicago.edu)
0	string		SQSH		squished archive data (Acorn RISCOS) [NSRL|SQSH]

# UC2 archiver (Greg Roelofs, newt@uchicago.edu)
# I can't figure out the self-extracting form of these buggers...
0	string		UC2\x1a		UC2 archive data [NSRL|UC2]

# Zoo archiver
20	lelong		0xfdc4a7dc	Zoo archive data [NSRL|ZOO]

# Shell archives
# JT, 2004-03-17: The "#" in the middle of the line makes it look like the
# rest of the line is commented out - I guess it's OK? Beware if parsing!
10	string		#\ This\ is\ a\ shell\ archive	shell archive text [NSRL|SH]

#
# LBR. NB: May conflict with the questionable 
#          "binary Computer Graphics Metafile" format.
#
0       string  \0\ \ \ \ \ \ \ \ \ \ \ \0\0    LBR archive data [NSRL|LBR]
#
# PMA (CP/M derivative of LHA)
#
2       string          -pm0-           PMarc archive data [pm0] [NSRL|PMA]
2       string          -pm1-           PMarc archive data [pm1] [NSRL|PMA]
2       string          -pm2-           PMarc archive data [pm2] [NSRL|PMA]
2       string          -pms-           PMarc SFX archive (CP/M, DOS) [NSRL|PMA-SFX]
5       string          -pc1-           PopCom compressed executable archive (CP/M) [NSRL|PPC-SFX]

# From rafael@icp.inpg.fr (Rafael Laboissiere) 
# The Project Revision Control System (see
# http://www.XCF.Berkeley.EDU/~jmacd/prcs.html) generates a packaged project
# file which is recognized by the following entry:
0	leshort		0xeb81	PRCS packaged project archive [NSRL|PRCS]

# GTKtalog catalogs 
# by David Necas (Yeti) <yeti@physics.muni.cz>
4	string	gtktalog\ 	GTKtalog catalog data archive, [NSRL|GTK]
>>14	beshort	0x677a		(gzipped)


#---------------------------Bootloaders--------------------------------

# CFE bootloader
0	string	CFE1CFE1	CFE boot loader, little endian
0	string	1EFC1EFC	CFE boot loader, big endian


#------------------Compression Formats-----------------------------

# bzip2
0       string          BZh
>4	string		1AY&SY		bzip2 compressed data
!:mime  application/x-bzip2
>>3      byte            >47            \b, block size = %c00k

# lzip  
0       string          LZIP            lzip compressed data
!:mime application/x-lzip
>4      byte            x               \b, version: %d

# LZO
0	string		\211LZO\000\015\012\032\012	LZO compressed data

# 7-zip archiver, from Thomas Klausner (wiz@danbala.tuwien.ac.at)
# http://www.7-zip.org or DOC/7zFormat.txt 
#
0       string          7z\274\257\047\034      7-zip archive data,
>6      byte            x                       version %d
>7      byte            x                       \b.%d

# standard unix compress
0       beshort		0x1f9d          compress'd data
>2      byte&0x80       >0              block compressed
>2      byte&0x1f       x               %d bits

# gzip (GNU zip, not to be confused with Info-ZIP or PKWARE zip archiver)
#   Edited by Chris Chittleborough <cchittleborough@yahoo.com.au>, March 2002
#       * Original filename is only at offset 10 if "extra field" absent
#       * Produce shorter output - notably, only report compression methods
#         other than 8 ("deflate", the only method defined in RFC 1952).
0       string          \037\213        gzip compressed data
!:mime  application/x-gzip
>2      byte            <8              \b, reserved (invalid) method
>2      byte            >8              \b, unknown (invalid) method
>3      byte            &0x01           \b, ASCII
>3      byte            &0x02           \b, has CRC
>3      byte            &0x04           \b, extra field
>3      byte&0xC        =0x08
>>10    string          x               \b, was "%s"
>3      byte            &0x10           \b, has comment
>9      byte            =0x00           \b, from FAT filesystem (MS-DOS, OS/2, NT)
>9      byte            =0x01           \b, from Amiga
>9      byte            =0x02           \b, from VMS
>9      byte            =0x03           \b, from Unix
>9      byte            =0x04           \b, from VM/CMS
>9      byte            =0x05           \b, from Atari
>9      byte            =0x06           \b, from HPFS filesystem (OS/2, NT)
>9      byte            =0x07           \b, from MacOS
>9      byte            =0x08           \b, from Z-System
>9      byte            =0x09           \b, from CP/M
>9      byte            =0x0A           \b, from TOPS/20
>9      byte            =0x0B           \b, from NTFS filesystem (NT)
>9      byte            =0x0C           \b, from QDOS
>9      byte            =0x0D           \b, from Acorn RISCOS
>9	byte		>0x0D		\b, invalid source
>3      byte            &0x10           \b, comment
>3      byte            &0x20           \b, encrypted
# Dates before 1992 are invalid, unless of course you're DD-WRT in which
# case you don't know how to set a date in your gzip files. Brilliant.
>4	lelong		=0		\b, DD-WRT date:
>4	lelong		<0		\b, invalid date:
>4	lelong		>0		
>>4	lelong		<694224000	\b, invalid date:
>>4	lelong		=694224000	\b, invalid date:
>>4	lelong		>694224000	\b, last modified:
>4      ledate          x               %s
>8      byte            2               \b, max compression
>8      byte            4               \b, max speed

# Zlib signatures
0	beshort		0x789C		zlib compressed data
0	beshort		0x78DA		zlib compressed data
0	beshort		0x7801		zlib compressed data

# Supplementary magic data for the file(1) command to support
# rzip(1).  The format is described in magic(5).
#
# Copyright (C) 2003 by Andrew Tridgell.  You may do whatever you want with
# this file.
#
0       string          RZIP            rzip compressed data
>4      byte            x               - version %d
>5      byte            x               \b.%d
>6      belong          x               (%d bytes)

# ZIP compression (Greg Roelofs, c/o zip-bugs@wkuvx1.wku.edu)
0       string          PK\003\004      Zip archive data, 
>4      byte            0x00            v0.0
!:mime  application/zip 
>4      byte            0x09            at least v0.9 to extract
!:mime  application/zip 
>4      byte            0x0a            at least v1.0 to extract
!:mime  application/zip 
>4      byte            0x0b            at least v1.1 to extract
!:mime  application/zip
>0x161  string          WINZIP          WinZIP self-extracting
!:mime  application/zip
>4      byte            0x14
>>30    ubelong         !0x6d696d65     at least v2.0 to extract
!:mime  application/zip

# Alternate ZIP string (amc@arwen.cs.berkeley.edu)
0       string          PK00PK\003\004  Zip archive data [NSRL|ZIP]

# Type: LZMA            
# URL:  http://www.7-zip.org/sdk.html   
#
# Added additional parsing to help verify LZMA matches and weed out false positives.
# Added improved signature checking.
# Added checks for possibly (probably) invalid matches.
# From: Craig Heffner

#First LZMA signature
0       string                  \x5d\x00\x00            LZMA compressed data,
>0	leshort			>0xE0			invalid
>0	byte			x			properties: 0x%.2X,
>1	lelong			<1			invalid
>1	lelong			x			dictionary size: %d bytes,
>5	lequad			0			invalid
>5	lequad			<0			invalid
>5	lequad			>0x40000000		invalid
>5	lequad			x			uncompressed size: %lld bytes

#An alternative common LZMA signature
1	belong			0x00008000		LZMA compressed data,
>0	byte			0			invalid
>0	leshort			>0xE0			invalid
>0	byte			x			properties: 0x%.2X,
>1      lelong                  <1                      invalid
>1      lelong                  x                       dictionary size: %d bytes,
>5	lequad			0			invalid
>5      lequad                  <0                      invalid
>5	lequad			>0x40000000		invalid
>5      lequad                  x                       uncompressed size: %lld bytes

#Signature for less common LZMA flag/dictionary values. Results in lots of false positives, but usually marked as invalid.
1	beshort			0x0000			LZMA compressed data,
>0	byte			0			invalid
>0	byte			>0xE0			invalid
>0	byte			x			properties: 0x%.2X,
>1	lelong			<1			invalid
>1	lelong			x			dictionary size: %d bytes,
>5	lequad			0			invalid
>5	lequad			<0			invalid
>5	lequad			>0x40000000		invalid
>5	lequad			x			uncompressed size: %lld bytes



#------------------Standard file formats------------------------------------

# elf:  file(1) magic for ELF executables
#
# We have to check the byte order flag to see what byte order all the
# other stuff in the header is in.
#
# What're the correct byte orders for the nCUBE and the Fujitsu VPP500?
#
# Created by: unknown
# Modified by (1): Daniel Quinlan <quinlan@yggdrasil.com>
# Modified by (2): Peter Tobias <tobias@server.et-inf.fho-emden.de> (core support)
# Modified by (3): Christian 'Dr. Disk' Hechelmann <drdisk@ds9.au.s.shuttle.de> (fix of core support)
# Modified by (4): <gerardo.cacciari@gmail.com> (VMS Itanium)
# Modified by (5): Matthias Urlichs <smurf@debian.org> (Listing of many architectures)
0       string          \177ELF         ELF
>4      byte            0               invalid class
>4      byte            1               32-bit
>4      byte            2               64-bit
>5      byte            0               invalid byte order
>5      byte            1               LSB
>>16    leshort         0               no file type,
!:strength *2
!:mime  application/octet-stream
>>16    leshort         1               relocatable,
!:mime  application/x-object
>>16    leshort         2               executable,
!:mime  application/x-executable
>>16    leshort         3               shared object,
!:mime  application/x-sharedlib
>>16    leshort         4               core file
!:mime  application/x-coredump
# Core file detection is not reliable.
#>>>(0x38+0xcc) string  >\0             of '%s'
#>>>(0x38+0x10) lelong  >0              (signal %d),
>>16    leshort         &0xff00         processor-specific,
>>18    leshort         0               no machine,
>>18    leshort         1               AT&T WE32100 - invalid byte order,
>>18    leshort         2               SPARC - invalid byte order,
>>18    leshort         3               Intel 80386,
>>18    leshort         4               Motorola
>>>36   lelong          &0x01000000     68000 - invalid byte order,
>>>36   lelong          &0x00810000     CPU32 - invalid byte order,
>>>36   lelong          0               68020 - invalid byte order,
>>18    leshort         5               Motorola 88000 - invalid byte order,
>>18    leshort         6               Intel 80486,
>>18    leshort         7               Intel 80860,
# The official e_machine number for MIPS is now #8, regardless of endianness.
# The second number (#10) will be deprecated later. For now, we still
# say something if #10 is encountered, but only gory details for #8.
>>18    leshort         8               MIPS,
>>>36   lelong          &0x20           N32
>>18    leshort         10              MIPS,
>>>36   lelong          &0x20           N32
>>18    leshort         8
# only for 32-bit
>>>4    byte            1
>>>>36  lelong&0xf0000000       0x00000000      MIPS-I
>>>>36  lelong&0xf0000000       0x10000000      MIPS-II
>>>>36  lelong&0xf0000000       0x20000000      MIPS-III
>>>>36  lelong&0xf0000000       0x30000000      MIPS-IV
>>>>36  lelong&0xf0000000       0x40000000      MIPS-V
>>>>36  lelong&0xf0000000       0x50000000      MIPS32
>>>>36  lelong&0xf0000000       0x60000000      MIPS64
>>>>36  lelong&0xf0000000       0x70000000      MIPS32 rel2
>>>>36  lelong&0xf0000000       0x80000000      MIPS64 rel2
# only for 64-bit
>>>4    byte            2
>>>>48  lelong&0xf0000000       0x00000000      MIPS-I
>>>>48  lelong&0xf0000000       0x10000000      MIPS-II
>>>>48  lelong&0xf0000000       0x20000000      MIPS-III
>>>>48  lelong&0xf0000000       0x30000000      MIPS-IV
>>>>48  lelong&0xf0000000       0x40000000      MIPS-V
>>>>48  lelong&0xf0000000       0x50000000      MIPS32
>>>>48  lelong&0xf0000000       0x60000000      MIPS64
>>>>48  lelong&0xf0000000       0x70000000      MIPS32 rel2
>>>>48  lelong&0xf0000000       0x80000000      MIPS64 rel2
>>18    leshort         9               Amdahl - invalid byte order,
>>18    leshort         10              MIPS (deprecated),
>>18    leshort         11              RS6000 - invalid byte order,
>>18    leshort         15              PA-RISC - invalid byte order,
>>>50   leshort         0x0214          2.0
>>>48   leshort         &0x0008         (LP64),
>>18    leshort         16              nCUBE,
>>18    leshort         17              Fujitsu VPP500,
>>18    leshort         18              SPARC32PLUS - invalid byte order,
>>18    leshort         20              PowerPC,
>>18    leshort         22              IBM S/390,
>>18    leshort         36              NEC V800,
>>18    leshort         37              Fujitsu FR20,
>>18    leshort         38              TRW RH-32,
>>18    leshort         39              Motorola RCE,
>>18    leshort         40              ARM,
>>18    leshort         41              Alpha,
>>18    leshort         0xa390          IBM S/390 (obsolete),
>>18    leshort         42              Renesas SH,
>>18    leshort         43              SPARC V9 - invalid byte order,
>>18    leshort         44              Siemens Tricore Embedded Processor,
>>18    leshort         45              Argonaut RISC Core, Argonaut Technologies Inc.,
>>18    leshort         46              Renesas H8/300,
>>18    leshort         47              Renesas H8/300H,
>>18    leshort         48              Renesas H8S,
>>18    leshort         49              Renesas H8/500,
>>18    leshort         50              IA-64,
>>18    leshort         51              Stanford MIPS-X,
>>18    leshort         52              Motorola Coldfire,
>>18    leshort         53              Motorola M68HC12,
>>18    leshort         54              Fujitsu MMA,
>>18    leshort         55              Siemens PCP,
>>18    leshort         56              Sony nCPU,
>>18    leshort         57              Denso NDR1,
>>18    leshort         58              Start*Core,
>>18    leshort         59              Toyota ME16,
>>18    leshort         60              ST100,
>>18    leshort         61              Tinyj emb.,
>>18    leshort         62              x86-64,
>>18    leshort         63              Sony DSP,
>>18    leshort         66              FX66,
>>18    leshort         67              ST9+ 8/16 bit,
>>18    leshort         68              ST7 8 bit,
>>18    leshort         69              MC68HC16,
>>18    leshort         70              MC68HC11,
>>18    leshort         71              MC68HC08,
>>18    leshort         72              MC68HC05,
>>18    leshort         73              SGI SVx,
>>18    leshort         74              ST19 8 bit,
>>18    leshort         75              Digital VAX,
>>18    leshort         76              Axis cris,
>>18    leshort         77              Infineon 32-bit embedded,
>>18    leshort         78              Element 14 64-bit DSP,
>>18    leshort         79              LSI Logic 16-bit DSP,
>>18    leshort         80              MMIX,
>>18    leshort         81              Harvard machine-independent,
>>18    leshort         82              SiTera Prism,
>>18    leshort         83              Atmel AVR 8-bit,
>>18    leshort         84              Fujitsu FR30,
>>18    leshort         85              Mitsubishi D10V,
>>18    leshort         86              Mitsubishi D30V,
>>18    leshort         87              NEC v850,
>>18    leshort         88              Renesas M32R,
>>18    leshort         89              Matsushita MN10300,
>>18    leshort         90              Matsushita MN10200,
>>18    leshort         91              picoJava,
>>18    leshort         92              OpenRISC,
>>18    leshort         93              ARC Cores Tangent-A5,
>>18    leshort         94              Tensilica Xtensa,
>>18    leshort         97              NatSemi 32k,
>>18    leshort         106             Analog Devices Blackfin,
>>18    leshort         113             Altera Nios II,
>>18    leshort         0xae            META,
>>18    leshort         0x3426          OpenRISC (obsolete),
>>18    leshort         0x8472          OpenRISC (obsolete),
>>18    leshort         0x9026          Alpha (unofficial),
>>20    lelong          0               invalid version
>>20    lelong          1               version 1
>>36    lelong          1               MathCoPro/FPU/MAU Required
>5      byte            2               MSB
>>16    beshort         0               no file type,
!:mime  application/octet-stream
>>16    beshort         1               relocatable,
!:mime  application/x-object
>>16    beshort         2               executable,
!:mime  application/x-executable
>>16    beshort         3               shared object,
!:mime  application/x-sharedlib
>>16    beshort         4               core file,
!:mime  application/x-coredump
#>>>(0x38+0xcc) string  >\0             of '%s'
#>>>(0x38+0x10) belong  >0              (signal %d),
>>16    beshort         &0xff00         processor-specific,
>>18    beshort         0               no machine,
>>18    beshort         1               AT&T WE32100,
>>18    beshort         2               SPARC,
>>18    beshort         3               Intel 80386 - invalid byte order,
>>18    beshort         4               Motorola
>>>36   belong          &0x01000000     68000,
>>>36   belong          &0x00810000     CPU32,
>>>36   belong          0               68020,
>>18    beshort         5               Motorola 88000,
>>18    beshort         6               Intel 80486 - invalid byte order,
>>18    beshort         7               Intel 80860,
# only for MIPS - see comment in little-endian section above.
>>18    beshort         8               MIPS,
>>>36   belong          &0x20           N32
>>18    beshort         10              MIPS,
>>>36   belong          &0x20           N32
>>18    beshort         8
# only for 32-bit
>>>4    byte            1
>>>>36  belong&0xf0000000       0x00000000      MIPS-I
>>>>36  belong&0xf0000000       0x10000000      MIPS-II
>>>>36  belong&0xf0000000       0x20000000      MIPS-III
>>>>36  belong&0xf0000000       0x30000000      MIPS-IV
>>>>36  belong&0xf0000000       0x40000000      MIPS-V
>>>>36  belong&0xf0000000       0x50000000      MIPS32
>>>>36  belong&0xf0000000       0x60000000      MIPS64
>>>>36  belong&0xf0000000       0x70000000      MIPS32 rel2
>>>>36  belong&0xf0000000       0x80000000      MIPS64 rel2
# only for 64-bit
>>>4    byte            2
>>>>48  belong&0xf0000000       0x00000000      MIPS-I
>>>>48  belong&0xf0000000       0x10000000      MIPS-II
>>>>48  belong&0xf0000000       0x20000000      MIPS-III
>>>>48  belong&0xf0000000       0x30000000      MIPS-IV
>>>>48  belong&0xf0000000       0x40000000      MIPS-V
>>>>48  belong&0xf0000000       0x50000000      MIPS32
>>>>48  belong&0xf0000000       0x60000000      MIPS64
>>>>48  belong&0xf0000000       0x70000000      MIPS32 rel2
>>>>48  belong&0xf0000000       0x80000000      MIPS64 rel2
>>18    beshort         9               Amdahl,
>>18    beshort         10              MIPS (deprecated),
>>18    beshort         11              RS6000,
>>18    beshort         15              PA-RISC
>>>50   beshort         0x0214          2.0
>>>48   beshort         &0x0008         (LP64)
>>18    beshort         16              nCUBE,
>>18    beshort         17              Fujitsu VPP500,
>>18    beshort         18              SPARC32PLUS,
>>>36   belong&0xffff00 0x000100        V8+ Required,
>>>36   belong&0xffff00 0x000200        Sun UltraSPARC1 Extensions Required,
>>>36   belong&0xffff00 0x000400        HaL R1 Extensions Required,
>>>36   belong&0xffff00 0x000800        Sun UltraSPARC3 Extensions Required,
>>18    beshort         20              PowerPC or cisco 4500,
>>18    beshort         21              64-bit PowerPC or cisco 7500,
>>18    beshort         22              IBM S/390,
>>18    beshort         23              Cell SPU,
>>18    beshort         24              cisco SVIP,
>>18    beshort         25              cisco 7200,
>>18    beshort         36              NEC V800 or cisco 12000,
>>18    beshort         37              Fujitsu FR20,
>>18    beshort         38              TRW RH-32,
>>18    beshort         39              Motorola RCE,
>>18    beshort         40              ARM,
>>18    beshort         41              Alpha,
>>18    beshort         42              Renesas SH,
>>18    beshort         43              SPARC V9,
>>>48   belong&0xffff00 0x000200        Sun UltraSPARC1 Extensions Required,
>>>48   belong&0xffff00 0x000400        HaL R1 Extensions Required,
>>>48   belong&0xffff00 0x000800        Sun UltraSPARC3 Extensions Required,
>>>48   belong&0x3      0               total store ordering,
>>>48   belong&0x3      1               partial store ordering,
>>>48   belong&0x3      2               relaxed memory ordering,
>>18    beshort         44              Siemens Tricore Embedded Processor,
>>18    beshort         45              Argonaut RISC Core, Argonaut Technologies Inc.,
>>18    beshort         46              Renesas H8/300,
>>18    beshort         47              Renesas H8/300H,
>>18    beshort         48              Renesas H8S,
>>18    beshort         49              Renesas H8/500,
>>18    beshort         50              IA-64,
>>18    beshort         51              Stanford MIPS-X,
>>18    beshort         52              Motorola Coldfire,
>>18    beshort         53              Motorola M68HC12,
>>18    beshort         73              Cray NV1,
>>18    beshort         75              Digital VAX,
>>18    beshort         88              Renesas M32R,
>>18    leshort         92              OpenRISC,
>>18    leshort         0x3426          OpenRISC (obsolete),
>>18    leshort         0x8472          OpenRISC (obsolete),
>>18    beshort         94              Tensilica Xtensa,
>>18    beshort         97              NatSemi 32k,
>>18    beshort         0x18ad          AVR32 (unofficial),
>>18    beshort         0x9026          Alpha (unofficial),
>>18    beshort         0xa390          IBM S/390 (obsolete),
>>20    belong          0               invalid version
>>20    belong          1               version 1
>>36    belong          1               MathCoPro/FPU/MAU Required
# Up to now only 0, 1 and 2 are defined; I've seen a file with 0x83, it seemed
# like proper ELF, but extracting the string had bad results.
>4      byte            <0x80
>>8     string          >\0             (%s)
>8      string          \0
>>7     byte            0               (SYSV)
>>7     byte            1               (HP-UX)
>>7     byte            2               (NetBSD)
>>7     byte            3               (GNU/Linux)
>>7     byte            4               (GNU/Hurd)
>>7     byte            5               (86Open)
>>7     byte            6               (Solaris)
>>7     byte            7               (Monterey)
>>7     byte            8               (IRIX)
>>7     byte            9               (FreeBSD)
>>7     byte            10              (Tru64)
>>7     byte            11              (Novell Modesto)
>>7     byte            12              (OpenBSD)
>8      string          \2
>>7     byte            13              (OpenVMS)
>>7     byte            97              (ARM)
>>7     byte            255             (embedded)



# XXX - according to Microsoft's spec, at an offset of 0x3c in a
# PE-format executable is the offset in the file of the PE header;
# unfortunately, that's a little-endian offset, and there's no way
# to specify an indirect offset with a specified byte order.
# So, for now, we assume the standard MS-DOS stub, which puts the
# PE header at 0x80 = 128.
#
# Required OS version and subsystem version were 4.0 on some NT 3.51
# executables built with Visual C++ 4.0, so it's not clear that
# they're interesting.  The user version was 0.0, but there's
# probably some linker directive to set it.  The linker version was
# 3.0, except for one ".exe" which had it as 4.20 (same damn linker!).
#
# many of the compressed formats were extraced from IDARC 1.23 source code
#
0       string  MZ
!:mime  application/x-dosexec
>0x18  leshort <0x40 MS-DOS executable
>0 string MZ\0\0\0\0\0\0\0\0\0\0PE\0\0 \b, PE for MS Windows
>>&18   leshort&0x2000  >0      (DLL)
>>&88   leshort         0       (unknown subsystem)
>>&88   leshort         1       (native)
>>&88   leshort         2       (GUI)
>>&88   leshort         3       (console)
>>&88   leshort         7       (POSIX)
>>&0    leshort         0x0     unknown processor
>>&0    leshort         0x14c   Intel 80386
>>&0    leshort         0x166   MIPS R4000
>>&0    leshort         0x184   Alpha
>>&0    leshort         0x268   Motorola 68000
>>&0    leshort         0x1f0   PowerPC
>>&0    leshort         0x290   PA-RISC
>>&18   leshort&0x0100  >0      32-bit
>>&18   leshort&0x1000  >0      system file
>>&228  lelong          >0      \b, Mono/.Net assembly
>>&0xf4 search/0x140 \x0\x40\x1\x0
>>>(&0.l+(4)) string MSCF \b, WinHKI CAB self-extracting archive
>30             string  Copyright\ 1989-1990\ PKWARE\ Inc.      Self-extracting PKZIP archive
!:mime  application/zip
# Is next line correct? One might expect "Corp." not "Copr." If it is right, add a note to that effect.
>30             string  PKLITE\ Copr.   Self-extracting PKZIP archive
!:mime  application/zip

>0x18  leshort >0x3f
>>(0x3c.l) string PE\0\0 PE
>>>(0x3c.l+25) byte             1 \b32 executable
>>>(0x3c.l+25) byte             2 \b32+ executable
# hooray, there's a DOS extender using the PE format, with a valid PE
# executable inside (which just prints a message and exits if run in win)
>>>(0x3c.l+92)  leshort         <10
>>>>(8.s*16) string 32STUB for MS-DOS, 32rtm DOS extender
>>>>(8.s*16) string !32STUB for MS Windows
>>>>>(0x3c.l+22)        leshort&0x2000  >0      (DLL)
>>>>>(0x3c.l+92)        leshort         0       (unknown subsystem)
>>>>>(0x3c.l+92)        leshort         1       (native)
>>>>>(0x3c.l+92)        leshort         2       (GUI)
>>>>>(0x3c.l+92)        leshort         3       (console)
>>>>>(0x3c.l+92)        leshort         7       (POSIX)
>>>(0x3c.l+92)  leshort         10      (EFI application)
>>>(0x3c.l+92)  leshort         11      (EFI boot service driver)
>>>(0x3c.l+92)  leshort         12      (EFI runtime driver)
>>>(0x3c.l+92)  leshort         13      (XBOX)
>>>(0x3c.l+4)   leshort         0x0     unknown processor
>>>(0x3c.l+4)   leshort         0x14c   Intel 80386
>>>(0x3c.l+4)   leshort         0x166   MIPS R4000
>>>(0x3c.l+4)   leshort         0x184   Alpha
>>>(0x3c.l+4)   leshort         0x268   Motorola 68000
>>>(0x3c.l+4)   leshort         0x1f0   PowerPC
>>>(0x3c.l+4)   leshort         0x290   PA-RISC
>>>(0x3c.l+4)   leshort         0x200   Intel Itanium
>>>(0x3c.l+22)  leshort&0x0100  >0      32-bit
>>>(0x3c.l+22)  leshort&0x1000  >0      system file
>>>(0x3c.l+232) lelong  >0      Mono/.Net assembly
>>>>(0x3c.l+0xf8)       string          UPX0 \b, UPX compressed
>>>>(0x3c.l+0xf8)       search/0x140    PEC2 \b, PECompact2 compressed
>>>>(0x3c.l+0xf8)       search/0x140    UPX2
>>>>>(&0x10.l+(-4))     string          PK\3\4 \b, ZIP self-extracting archive (Info-Zip)
>>>>(0x3c.l+0xf8)       search/0x140    .idata
>>>>>(&0xe.l+(-4))      string          PK\3\4 \b, ZIP self-extracting archive (Info-Zip)
>>>>>(&0xe.l+(-4))      string          ZZ0 \b, ZZip self-extracting archive
>>>>>(&0xe.l+(-4))      string          ZZ1 \b, ZZip self-extracting archive
>>>>(0x3c.l+0xf8)       search/0x140    .rsrc
>>>>>(&0x0f.l+(-4))     string          a\\\4\5 \b, WinHKI self-extracting archive
>>>>>(&0x0f.l+(-4))     string          Rar! \b, RAR self-extracting archive
>>>>>(&0x0f.l+(-4))     search/0x3000   MSCF \b, InstallShield self-extracting archive
>>>>>(&0x0f.l+(-4))     search/32       Nullsoft \b, Nullsoft Installer self-extracting archive
>>>>(0x3c.l+0xf8)       search/0x140    .data
>>>>>(&0x0f.l)          string          WEXTRACT \b, MS CAB-Installer self-extracting archive
>>>>(0x3c.l+0xf8)       search/0x140    .petite\0 \b, Petite compressed
>>>>>(0x3c.l+0xf7)      byte            x
>>>>>>(&0x104.l+(-4))   string          =!sfx! \b, ACE self-extracting archive
>>>>(0x3c.l+0xf8)       search/0x140    .WISE \b, WISE installer self-extracting archive
>>>>(0x3c.l+0xf8)       search/0x140    .dz\0\0\0 \b, Dzip self-extracting archive
>>>>(0x3c.l+0xf8)       search/0x140    .reloc
>>>>>(&0xe.l+(-4))      search/0x180    PK\3\4 \b, ZIP self-extracting archive (WinZip)

>>>>&(0x3c.l+0xf8)      search/0x100    _winzip_ \b, ZIP self-extracting archive (WinZip)
>>>>&(0x3c.l+0xf8)      search/0x100    SharedD \b, Microsoft Installer self-extracting archive
>>>>0x30                string          Inno \b, InnoSetup self-extracting archive

>>(0x3c.l) string !PE\0\0 MS-DOS executable

>>(0x3c.l)              string          NE \b, NE
>>>(0x3c.l+0x36)        byte            0 (unknown OS)
>>>(0x3c.l+0x36)        byte            1 for OS/2 1.x
>>>(0x3c.l+0x36)        byte            2 for MS Windows 3.x
>>>(0x3c.l+0x36)        byte            3 for MS-DOS
>>>(0x3c.l+0x36)        byte            >3 (unknown OS)
>>>(0x3c.l+0x36)        byte            0x81 for MS-DOS, Phar Lap DOS extender
>>>(0x3c.l+0x0c)        leshort&0x8003  0x8002 (DLL)
>>>(0x3c.l+0x0c)        leshort&0x8003  0x8001 (driver)
>>>&(&0x24.s-1)         string          ARJSFX \b, ARJ self-extracting archive
>>>(0x3c.l+0x70)        search/0x80     WinZip(R)\ Self-Extractor \b, ZIP self-extracting archive (WinZip)

>>(0x3c.l)              string          LX\0\0 \b, LX
>>>(0x3c.l+0x0a)        leshort         <1 (unknown OS)
>>>(0x3c.l+0x0a)        leshort         1 for OS/2
>>>(0x3c.l+0x0a)        leshort         2 for MS Windows
>>>(0x3c.l+0x0a)        leshort         3 for DOS
>>>(0x3c.l+0x0a)        leshort         >3 (unknown OS)
>>>(0x3c.l+0x10)        lelong&0x28000  =0x8000 (DLL)
>>>(0x3c.l+0x10)        lelong&0x20000  >0 (device driver)
>>>(0x3c.l+0x10)        lelong&0x300    0x300 (GUI)
>>>(0x3c.l+0x10)        lelong&0x28300  <0x300 (console)
>>>(0x3c.l+0x08)        leshort         1 i80286
>>>(0x3c.l+0x08)        leshort         2 i80386
>>>(0x3c.l+0x08)        leshort         3 i80486
>>>(8.s*16)             string          emx \b, emx
>>>>&1                  string          x %s
>>>&(&0x54.l-3)         string          arjsfx \b, ARJ self-extracting archive



#------------------------------------------------------------------------------
# bFLT: file(1) magic for BFLT uclinux binary files
#
# From Philippe De Muyter <phdm@macqel.be>
# 
# Additional fields added by Craig Heffner
#
0       string          bFLT            BFLT executable 
>4      belong          x               version %ld, 
>4      belong          4
>8	belong		x		code offset: 0x%.8X, 
>12	belong		x		data segment starts at: 0x%.8X, 
>16	belong		x		bss segment starts at: 0x%.8X, 
>20	belong		x		bss segment ends at: 0x%.8X, 
>24	belong		x		stack size: %d bytes, 
>28	belong 		x		relocation records start at: 0x%.8X, 
>32	belong		x		number of reolcation records: %d, 
>>36    belong&0x1      0x1             ram
>>36    belong&0x2      0x2             gotpic
>>36    belong&0x4      0x4             gzip
>>36    belong&0x8      0x8             gzdata


#-----------------------------------------------------------------
# MIPS COFF file formats
#
0       beshort 0x0160          MIPSEB ECOFF executable
>20     beshort 0407            (impure)
>20     beshort 0410            (swapped)
>20     beshort 0413            (paged)
>8      belong  >0              not stripped
>8      belong  0               stripped
>22     byte    x               - version %ld
>23     byte    x               ^H.%ld
#
0       beshort 0x0162          MIPSEL-BE ECOFF executable
>20     beshort 0407            (impure)
>20     beshort 0410            (swapped)
>20     beshort 0413            (paged)
>8      belong  >0              not stripped
>8      belong  0               stripped
>23     byte    x               - version %d
>22     byte    x               ^H.%ld
#
0       beshort 0x6001          MIPSEB-LE ECOFF executable
>20     beshort 03401           (impure)
>20     beshort 04001           (swapped)
>20     beshort 05401           (paged)
>8      belong  >0              not stripped
>8      belong  0               stripped
>23     byte    x               - version %d
>22     byte    x               ^H.%ld
#
0       beshort 0x6201          MIPSEL ECOFF executable
>20     beshort 03401           (impure)
>20     beshort 04001           (swapped)
>20     beshort 05401           (paged)
>8      belong  >0              not stripped
>8      belong  0               stripped
>23     byte    x               - version %ld
>22     byte    x               ^H.%ld
# MIPS 2 additions
#
0       beshort 0x0163          MIPSEB MIPS-II ECOFF executable
>20     beshort 0407            (impure)
>20     beshort 0410            (swapped)
>20     beshort 0413            (paged)
>8      belong  >0              not stripped
>8      belong  0               stripped
>22     byte    x               - version %ld
>23     byte    x               ^H.%ld
#
0       beshort 0x0166          MIPSEL-BE MIPS-II ECOFF executable
>20     beshort 0407            (impure)
>20     beshort 0410            (swapped)
>20     beshort 0413            (paged)
>8      belong  >0              not stripped
>8      belong  0               stripped
>22     byte    x               - version %ld
>23     byte    x               ^H.%ld
#
0       beshort 0x6301          MIPSEB-LE MIPS-II ECOFF executable
>20     beshort 03401           (impure)
>20     beshort 04001           (swapped)
>20     beshort 05401           (paged)
>8      belong  >0              not stripped
>8      belong  0               stripped
>23     byte    x               - version %ld
>22     byte    x               ^H.%ld
#
0       beshort 0x6601          MIPSEL MIPS-II ECOFF executable
>20     beshort 03401           (impure)
>20     beshort 04001           (swapped)
>20     beshort 05401           (paged)
>8      belong  >0              not stripped
>8      belong  0               stripped
>23     byte    x               - version %ld
>22     byte    x               ^H.%ld
# MIPS 3 additions
#
0       beshort 0x0140          MIPSEB MIPS-III ECOFF executable
>20     beshort 0407            (impure)
>20     beshort 0410            (swapped)
>20     beshort 0413            (paged)
>8      belong  >0              not stripped
>8      belong  0               stripped
>22     byte    x               - version %ld
>23     byte    x               ^H.%ld
#
0       beshort 0x0142          MIPSEL-BE MIPS-III ECOFF executable
>20     beshort 0407            (impure)
>20     beshort 0410            (swapped)
>20     beshort 0413            (paged)
>8      belong  >0              not stripped
>8      belong  0               stripped
>22     byte    x               - version %ld
>23     byte    x               ^H.%ld
#
0       beshort 0x4001          MIPSEB-LE MIPS-III ECOFF executable
>20     beshort 03401           (impure)
>20     beshort 04001           (swapped)
>20     beshort 05401           (paged)
>8      belong  >0              not stripped
>8      belong  0               stripped
>23     byte    x               - version %ld
>22     byte    x               ^H.%ld
#
0       beshort 0x4201          MIPSEL MIPS-III ECOFF executable
>20     beshort 03401           (impure)
>20     beshort 04001           (swapped)
>20     beshort 05401           (paged)
>8      belong  >0              not stripped
>8      belong  0               stripped
>23     byte    x               - version %ld
>22     byte    x               ^H.%ld
#
0       beshort 0x180           MIPSEB Ucode
0       beshort 0x182           MIPSEL-BE Ucode


# Windows CE package files
0       string          MSCE\0\0\0\0    Microsoft WinCE installer
>20     lelong          0               \b, architecture-independent
>20     lelong          103             \b, Hitachi SH3
>20     lelong          104             \b, Hitachi SH4
>20     lelong          0xA11           \b, StrongARM
>20     lelong          4000            \b, MIPS R4000
>20     lelong          10003           \b, Hitachi SH3
>20     lelong          10004           \b, Hitachi SH3E
>20     lelong          10005           \b, Hitachi SH4
>20     lelong          70001           \b, ARM 7TDMI
>52     leshort         1               \b, 1 file
>52     leshort         >1              \b, %u files
>56     leshort         1               \b, 1 registry entry
>56     leshort         >1              \b, %u registry entries

#------------------------------------------------------------------------------
# Microsoft Xbox executables .xbe (Esa HyytiÃ¤ <ehyytia@cc.hut.fi>)
0       string          XBEH            XBE, Microsoft Xbox executable
# probabilistic checks whether signed or not
>0x0004 ulelong =0x0
>>&2    ulelong =0x0
>>>&2   ulelong =0x0  \b, not signed
>0x0004 ulelong >0
>>&2    ulelong >0
>>>&2   ulelong >0    \b, signed
# expect base address of 0x10000
>0x0104               ulelong =0x10000
>>(0x0118-0x0FF60)    ulelong&0x80000007  0x80000007 \b, all regions
>>(0x0118-0x0FF60)    ulelong&0x80000007  !0x80000007
>>>(0x0118-0x0FF60)   ulelong >0           (regions:
>>>>(0x0118-0x0FF60)  ulelong &0x00000001  NA
>>>>(0x0118-0x0FF60)  ulelong &0x00000002  Japan
>>>>(0x0118-0x0FF60)  ulelong &0x00000004  Rest_of_World
>>>>(0x0118-0x0FF60)  ulelong &0x80000000  Manufacturer
>>>(0x0118-0x0FF60)   ulelong >0           \b)

#------------------------------------------------------------------------------
# motorola:  file(1) magic for Motorola 68K and 88K binaries
#
# 68K
#
0       beshort         0x0208          mc68k COFF
>18     beshort         ^00000020       object
>18     beshort         &00000020       executable
>12     belong          >0              not stripped
>168    string          .lowmem         Apple toolbox
>20     beshort         0407            (impure)
>20     beshort         0410            (pure)
>20     beshort         0413            (demand paged)
>20     beshort         0421            (standalone)
0       beshort         0x0209          mc68k executable (shared)
>12     belong          >0              not stripped
0       beshort         0x020A          mc68k executable (shared demand paged)
>12     belong          >0              not stripped


#
# Motorola/UniSoft 68K Binary Compatibility Standard (BCS)
#
0       beshort         0x022A            68K BCS executable
#
# 88K
#
# Motorola/88Open BCS
#
0       beshort         0x022B            88K BCS executable

#------------------------------------------------------------------------------
# Sony Playstation executables (Adam Sjoegren <asjo@diku.dk>) :
0       string  PS-X\ EXE       Sony Playstation executable
#  Area:
>113    string  x               (%s)

#------------------------------------------------------------------------------
# cisco:  file(1) magic for cisco Systems routers
#
# Most cisco file-formats are covered by the generic elf code
#
# Microcode files are non-ELF, 0x8501 conflicts with NetBSD/alpha.
0	beshort			0x8501	    cisco IOS
>0      belong&0xffffff00       0x85011400  microcode
>0      belong&0xffffff00       0x8501cb00  experimental microcode
>7      string          	>\0         for '%s'



#--------------------File Systems---------------------

# Minix filesystems - Juan Cespedes <cespedes@debian.org>
# Disabled for now until better signatures can be created. Too many false positives.
#0x410   leshort         0x137f          Minix filesystem
#>0x402  beshort         !0              \b, %d zones
#>0x1e   string          minix           \b, bootable
#0x410   leshort         0x138f          Minix filesystem, 30 char names
#0x410   leshort         0x2468          Minix filesystem, version 2
#0x410   leshort         0x2478          Minix filesystem, version 2, 30 char names

#0x410   beshort         0x137f          Minix filesystem (big endian)
#>0x402  beshort         !0              \b, %d zones
#>0x1e   string          minix           \b, bootable
#0x410   beshort         0x138f          Minix filesystem (big endian), 30 char names
#0x410   beshort         0x2468          Minix filesystem (big endian), version 2
#0x410   beshort         0x2478          Minix filesystem (big endian), version 2, 30 char names

# YAFFS
0	belong 	0x03000000
>4	belong 	0x01000000
>>8	beshort	0xFFFF		YAFFS filesystem

# EFS2 file system - jojo@utulsa.edu
8       string EFSSuper         EFS2 Qualcomm filesystem super block,
>0      lelong 0x53000000	little endian,
>>4     leshort &1              NAND
>>4     leshort ^1              NOR
>>4     leshort x               version 0x%x,
>>24    lelong  x               %d blocks,
>>16    lelong  x               0x%x pages per block,
>>20    lelong  x               0x%x bytes per page

8	string SSFErepu		EFS2 Qualcomm filesystem super block,
>0      belong 0x53000000	big endian,
>>4     beshort &1              NAND
>>4     beshort ^1              NOR
>>4     beshort x               version 0x%x,
>>24    belong  x               %d blocks,
>>16    belong  x               0x%x pages per block,
>>20    belong  x               0x%x bytes per page

# TROC file system
0	string	TROC		TROC filesystem,
>4	lelong	x		%d file entries

# PFS file system
0	string	PFS/		PFS filesystem,
>4	string	x		version %s,
>14	leshort	x		%d files

# MPFS file system
0	string	MPFS		MPFS (Microchip) filesystem,
>4	byte	x		version %d.
>5	byte	x		\b%d,
>6	leshort	x		%d file entries

# cramfs filesystem - russell@coker.com.au
0       lelong  0x28cd3d45      CramFS filesystem, little endian
>4	lelong	<0		invalid
>4      lelong  x 		size %lu
>8      lelong  &1 		version #2
>8      lelong  &2 		sorted_dirs
>8      lelong  &4 		hole_support
>32     lelong  x 		CRC 0x%x,
>36     lelong  x 		edition %lu,
>40	lelong	<0		invalid
>40     lelong  x 		%lu blocks,
>44	lelong	<0		invalid
>44     lelong  x 		%lu files

0       belong  0x28cd3d45      CramFS filesystem, big endian
>4	belong	<0		invalid
>4      belong  x 		size %lu
>8      belong  &1 		version #2
>8      belong  &2 		sorted_dirs
>8      belong  &4 		hole_support
>32     belong  x 		CRC 0x%x,
>36     belong  x 		edition %lu,
>40	belong	<0		invalid
>40     belong  x 		%lu blocks,
>44	belong	<0		invalid
>44     belong  x 		%lu files



# JFFS2 file system
0       leshort 0x1984          JFFS2 filesystem (old) data little endian,
>4	lelong	>1000000	invalid
>4	lelong	<0		invalid
>4	lelong	0		invalid
>4	lelong	x		JFFS node length: %d

0       beshort 0x1984          JFFS2 filesystem (old) data big endian,
>4      belong  >1000000        invalid
>4      belong  <0              invalid
>4	belong	0		invalid
>4      belong  x               JFFS node length: %d

0       leshort 0x1985          JFFS2 filesystem data little endian,
>4      lelong  >1000000        invalid
>4      lelong  <0              invalid
>4	lelong	0		invalid
>4	lelong	x		JFFS node length: %d

0       beshort 0x1985          JFFS2 filesystem data big endian,
>4      belong  >1000000        invalid
>4      belong  <0              invalid
>4	belong	0		invalid
>4      belong  x               JFFS node length: %d


# Squashfs
0       string  sqsh    Squashfs filesystem, big endian,
>28     beshort >10     invalid
>28     beshort <1      invalid
>28     beshort x       version %d.
>30     beshort x       \b%d,
>28     beshort >3      compression:
>>20    beshort 1       \bgzip,
>>20    beshort 2       \blzma,
>28     beshort <3
>>8     belong  x       size: %d bytes,
>28     beshort 3
>>63    bequad x        size: %lld bytes,
>28     beshort >3
>>40    bequad  x       size: %lld bytes,
>4      belong  x       %d inodes,
>28     beshort >3
>>12    belong          blocksize: %d bytes,
>28     beshort <2
>>32    beshort x       blocksize: %d bytes,
>28     beshort 2
>>51    belong  x       blocksize: %d bytes,
>28     beshort 3
>>51    belong  x       blocksize: %d bytes,
>28     beshort >3
>>12    belong  x       blocksize: %d bytes,
>28     beshort <4
>>39    bedate  x       created: %s
>28     beshort >3
>>8     bedate x        created: %s

0       string  hsqs    Squashfs filesystem, little endian,
>28     leshort >10     invalid
>28     leshort <1      invalid
>28     leshort x       version %d.
>30     leshort x       \b%d,
>28	leshort >3	compression: 
>>20	leshort 1	\bgzip,
>>20	leshort	2	\blzma,
>28     leshort <3
>>8     lelong  x       size: %d bytes,
>28     leshort 3
>>63    lequad x        size: %lld bytes,
>28	leshort >3	
>>40	lequad	x	size: %lld bytes,
>4      lelong  x       %d inodes,
>28	leshort >3
>>12	lelong		blocksize: %d bytes,
>28     leshort <2
>>32    leshort x       blocksize: %d bytes,
>28     leshort 2
>>51    lelong  x       blocksize: %d bytes,
>28	leshort 3
>>51	lelong 	x	blocksize: %d bytes,
>28	leshort	>3	
>>12	lelong	x	blocksize: %d bytes,
>28	leshort <4
>>39    ledate  x	created: %s
>28	leshort >3
>>8	ledate x	created: %s

# Squashfs with LZMA compression
0       string  sqlz    Squashfs filesystem, big endian, lzma compression, 
>28     beshort >10     invalid
>28     beshort <1      invalid
>28     beshort x       version %d.
>30     beshort x       \b%d,
>28     beshort <3
>>8     belong  x       size: %d bytes,
>28     beshort >2
>>63    bequad x        size: %lld bytes,
#>>67   belong  x       %d bytes,
>4      belong  x       %d inodes,
>28     beshort <2
>>32    beshort x       blocksize: %d bytes,
>28     beshort >1
>>51    belong  x       blocksize: %d bytes,
>39     bedate  x       created: %s

# Squashfs 3.3 LZMA signature
0       string  qshs    Squashfs filesystem, big endian, lzma signature,
>28     beshort >10     invalid
>28     beshort <1      invalid
>28     beshort x       version %d.
>30     beshort x       \b%d,
>28     beshort <3
>>8     belong  x       size: %d bytes,
>28     beshort >2
>>63    bequad x        size: %lld bytes,
#>>67   belong  x       %d bytes,
>4      belong  x       %d inodes,
>28     beshort <2
>>32    beshort x       blocksize: %d bytes,
>28     beshort >1
>>51    belong  x       blocksize: %d bytes,
>39     bedate  x       created: %s

# Squashfs for DD-WRT
0       string  tqsh    Squashfs filesystem, big endian, DD-WRT signature,
>28     beshort >10     invalid
>28     beshort <1      invalid
>28     beshort x       version %d.
>30     beshort x       \b%d,
>28     beshort <3
>>8     belong  x       size: %d bytes,
>28     beshort >2
>>63    bequad x        size: %lld bytes,
#>>67   belong  x       %d bytes,
>4      belong  x       %d inodes,
>28     beshort <2
>>32    beshort x       blocksize: %d bytes,
>28     beshort >1
>>51    belong  x       blocksize: %d bytes,
>39     bedate  x       created: %s

# Squashfs for DD-WRT
0       string  hsqt    Squashfs filesystem, little endian, DD-WRT signature,
>28     leshort >10     invalid
>28     leshort <1      invalid
>28     leshort x       version %d.
>30     leshort x       \b%d,
>28     leshort <3
>>8     lelong  x       size: %d bytes,
>28     leshort >2
>>63    lequad x        size: %lld bytes,
#>>63   lelong  x       %d bytes,
>4      lelong  x       %d inodes,
>28     leshort <2
>>32    leshort x       blocksize: %d bytes,
>28     leshort >1
>>51    lelong  x       blocksize: %d bytes,
>39     ledate  x       created: %s

# Non-standard Squashfs signature found on some D-Link routers
0       string  shsq    Squashfs filesystem, little endian, non-standard signature, 
>28     leshort >10     invalid
>28     leshort <1      invalid
>28     leshort x       version %d.
>30     leshort x       \b%d,
>28     leshort <3
>>8     lelong  x       size: %d bytes,
>28     leshort >2
>>63    lequad x        size: %lld bytes,
#>>63   lelong  x       %d bytes,
>4      lelong  x       %d inodes,
>28     leshort <2
>>32    leshort x       blocksize: %d bytes,
>28     leshort >1
>>51    lelong  x       blocksize: %d bytes,
>39     ledate  x       created: %s

# Commented out for now - unlikely to be found in firmware
# CDROM Filesystems
# Modified for UDF by gerardo.cacciari@gmail.com
#32769   string    CD001     #
#!:mime  application/x-iso9660-image
#>38913  string   !NSR0      ISO 9660 CD-ROM filesystem data
#>38913  string    NSR0      UDF filesystem data
#>>38917 string    1         (version 1.0)
#>>38917 string    2         (version 1.5)
#>>38917 string    3         (version 2.0)
#>>38917 byte     >0x33      (unknown version, ID 0x%X)
#>>38917 byte     <0x31      (unknown version, ID 0x%X)
# "application id" which appears to be used as a volume label
#>32808  string    >\0       '%s'
#>34816  string    \000CD001\001EL\ TORITO\ SPECIFICATION    (bootable)
#37633   string    CD001     ISO 9660 CD-ROM filesystem data (raw 2352 byte sectors)
#!:mime  application/x-iso9660-image
#32776   string    CDROM     High Sierra CD-ROM filesystem data

# reiserfs - russell@coker.com.au
0x10034         string  ReIsErFs        ReiserFS filesystem V3.5
0x10034         string  ReIsEr2Fs       ReiserFS filesystem V3.6
0x10034         string  ReIsEr3Fs       ReiserFS filesystem V3.6.19
>0x1002c        leshort x               block size %d
>0x10032        leshort &2              (mounted or unclean)
>0x10000        lelong  x               num blocks %d
>0x10040        lelong  1               tea hash
>0x10040        lelong  2               yura hash
>0x10040        lelong  3               r5 hash


# ext2/ext3 filesystems - Andreas Dilger <adilger@dilger.ca>
# ext4 filesystem - Eric Sandeen <sandeen@sandeen.net>
# volume label and UUID Russell Coker
# http://etbe.coker.com.au/2008/07/08/label-vs-uuid-vs-device/
0x438   leshort         0xEF53          Linux EXT filesystem
>0x44c  lelong		<0		invalid
>0x44c	lelong		>4		invalid
>0x44c  lelong          x               rev %d
>0x43e  leshort         x               \b.%d
# No journal?  ext2
>0x45c  lelong          ^0x0000004      ext2 filesystem data
>>0x43a leshort         ^0x0000001      (mounted or unclean)
# Has a journal?  ext3 or ext4
>0x45c  lelong          &0x0000004
#  and small INCOMPAT?
>>0x460 lelong          <0x0000040
#   and small RO_COMPAT?
>>>0x464 lelong         <0x0000008      ext3 filesystem data
#   else large RO_COMPAT?
>>>0x464 lelong         >0x0000007      ext4 filesystem data
#  else large INCOMPAT?
>>0x460 lelong          >0x000003f      ext4 filesystem data
>0x468  belong          x               \b, UUID=%08x
>0x46c  beshort         x               \b-%04x
>0x46e  beshort         x               \b-%04x
>0x470  beshort         x               \b-%04x
>0x472  belong          x               \b-%08x
>0x476  beshort         x               \b%04x
>0x478  string          >0              \b, volume name "%s"
# General flags for any ext* fs
>0x460  lelong          &0x0000004      (needs journal recovery)
>0x43a  leshort         &0x0000002      (errors, invalid)
# INCOMPAT flags
>0x460  lelong          &0x0000001      (compressed)
#>0x460 lelong          &0x0000002      (filetype)
#>0x460 lelong          &0x0000010      (meta bg)
>0x460  lelong          &0x0000040      (extents)
>0x460  lelong          &0x0000080      (64bit)
#>0x460 lelong          &0x0000100      (mmp)
#>0x460 lelong          &0x0000200      (flex bg)
# RO_INCOMPAT flags
#>0x464 lelong          &0x0000001      (sparse super)
>0x464  lelong          &0x0000002      (large files)
>0x464  lelong          &0x0000008      (huge files)
#>0x464 lelong          &0x0000010      (gdt checksum)


#romfs filesystems - Juan Cespedes <cespedes@debian.org>
0       string          -rom1fs-        romfs filesystem, version 1
>8	belong	>10000000		invalid
>8      belong  x                       size: %d bytes,
>16     string  x                       named %s.

# JFFS - russell@coker.com.au           
0       lelong  0x34383931      Linux Journalled Flash filesystem, little endian
0       belong  0x34383931      Linux Journalled Flash filesystem, big endian

# Wind River MemFS file system, found in some VxWorks devices
0	string	owowowowowowowowowowowowowowow		Wind River management filesystem,
>32	belong	0					uncompressed
>32	belong	1					compressed,
>36	belong	x					%d files


# FATX 
0		string		FATX		FATX filesystem data





# updated by Joerg Jenderek at Sep 2007
# only for sector sizes with 512 or more Bytes
0x1FE	leshort	0xAA55			start boot sector
# to do also for sectors < than 512 Bytes and some other files, GRR
#30	search/481	\x55\xAA	start boot sector / filesystem
# not for BeOS floppy 1440k, MBRs
#(11.s-2) uleshort	0xAA55		start boot sector / filesystem
>2	string	OSBS			\b, OS/BS MBR
# J\xf6rg Jenderek <joerg dot jenderek at web dot de>
>0x8C	string	Invalid\ partition\ table	\b, MS-DOS MBR
# dr-dos with some upper-, lowercase variants
>0x9D	string	Invalid\ partition\ table$	
>>181	string	No\ Operating\ System$		
>>>201	string	Operating\ System\ load\ error$	\b, DR-DOS MBR, Version 7.01 to 7.03
>0x9D	string	Invalid\ partition\ table$	
>>181	string	No\ operating\ system$		
>>>201	string	Operating\ system\ load\ error$	\b, DR-DOS MBR, Version 7.01 to 7.03
>342	string	Invalid\ partition\ table$	
>>366	string	No\ operating\ system$		
>>>386	string	Operating\ system\ load\ error$	\b, DR-DOS MBR, version 7.01 to 7.03
>295	string	NEWLDR\0				
>>302	string	Bad\ PT\ $				
>>>310	string	No\ OS\ $				
>>>>317	string	OS\ load\ err$				
>>>>>329	string	Moved\ or\ missing\ IBMBIO.LDR\n\r	
>>>>>>358	string	Press\ any\ key\ to\ continue.\n\r$	
>>>>>>>387	string	Copyright\ (c)\ 1984,1998	
>>>>>>>>411	string	Caldera\ Inc.\0		\b, DR-DOS MBR (IBMBIO.LDR)
>0x10F	string	Ung\201ltige\ Partitionstabelle	\b, MS-DOS MBR, german version 4.10.1998, 4.10.2222
>>0x1B8	ubelong	>0				\b, Serial 0x%-.4x
>0x8B	string	Ung\201ltige\ Partitionstabelle	\b, MS-DOS MBR, german version 5.00 to 4.00.950
>271	string	Invalid\ partition\ table\0		
>>295	string	Error\ loading\ operating\ system\0	
>>>326	string	Missing\ operating\ system\0		\b, mbr
#
>139	string	Invalid\ partition\ table\0		
>>163	string	Error\ loading\ operating\ system\0	
>>>194	string	Missing\ operating\ system\0		\b, Microsoft Windows XP mbr
# http://www.heise.de/ct/05/09/006/ page 184
#HKEY_LOCAL_MACHINE\SYSTEM\MountedDevices\DosDevices\?:=Serial4Bytes+8Bytes
>>>>0x1B8	ulelong	>0				\b,Serial 0x%-.4x
>300	string	Invalid\ partition\ table\0	
>>324	string	Error\ loading\ operating\ system\0
>>>355	string	Missing\ operating\ system\0		\b, Microsoft Windows XP MBR
#??>>>389	string	Invalid\ system\ disk		
>>>>0x1B8	ulelong	>0				\b, Serial 0x%-.4x
>300	string	Ung\201ltige\ Partitionstabelle
#split string to avoid error: String too long
>>328	string	Fehler\ beim\ Laden\ 	
>>>346	string	des\ Betriebssystems	
>>>>366	string	Betriebssystem\ nicht\ vorhanden	\b, Microsoft Windows XP MBR (german)
>>>>>0x1B8	ulelong	>0				\b, Serial 0x%-.4x
#>0x145	string	Default:\ F				\b, FREE-DOS MBR
#>0x14B	string	Default:\ F				\b, FREE-DOS 1.0 MBR
>0x145	search/7	Default:\ F			\b, FREE-DOS MBR
#>>313		string	F0\ .\ .\ .			
#>>>322		string	disk\ 1				
#>>>>382	string	FAT3				
>64	string	no\ active\ partition\ found	
>>96	string	read\ error\ while\ reading\ drive	\b, FREE-DOS Beta 0.9 MBR
# Ranish Partition Manager http://www.ranish.com/part/
>387	search/4	\0\ Error!\r			
>>378	search/7	Virus! 				
>>>397	search/4	Booting\ 			
>>>>408	search/4	HD1/\0	 			\b, Ranish MBR (
>>>>>416	string	Writing\ changes...		\b2.37
>>>>>>438	ubyte		x			\b,0x%x dots
>>>>>>440	ubyte		>0			\b,virus check
>>>>>>441	ubyte		>0			\b,partition %c
#2.38,2.42,2.44
>>>>>416	string	!Writing\ changes...		\b
>>>>>>418	ubyte	1				\bvirus check,
>>>>>>419	ubyte	x				\b0x%x seconds
>>>>>>420	ubyte&0x0F	>0			\b,partition
>>>>>>>420	ubyte&0x0F	<5			\b %x
>>>>>>>420	ubyte&0x0F	0Xf			\b ask
>>>>>420	ubyte		x			\b)
#
>271	string	Operating\ system\ loading 		
>>296	string	error\r					\b, SYSLINUX MBR (2.10)
# http://www.acronis.de/
>362	string	MBR\ Error\ \0\r			
>>376	string	ress\ any\ key\ to\ 			
>>>392	string	boot\ from\ floppy...\0			\b, Acronis MBR
# added by Joerg Jenderek
# http://www.visopsys.org/
# http://partitionlogic.org.uk/
>309	string	No\ bootable\ partition\ found\r	
>>339	string	I/O\ Error\ reading\ boot\ sector\r	\b, Visopsys MBR
>349	string	No\ bootable\ partition\ found\r	
>>379	string	I/O\ Error\ reading\ boot\ sector\r	\b, simple Visopsys MBR
# bootloader, bootmanager
>0x40	string	SBML				
# label with 11 characters of FAT 12 bit filesystem
>>43	string	SMART\ BTMGR			
>>>430	string	SBMK\ Bad!\r			\b, Smart Boot Manager
# OEM-ID not always "SBM"
#>>>>3	strings	SBM				
>>>>6	string	>\0                             \b, version %s
>382	string	XOSLLOADXCF			\b, eXtended Operating System Loader
>6	string	LILO				\b, LInux i386 boot LOader
>>120	string	LILO				\b, version 22.3.4 SuSe
>>172	string	LILO				\b, version 22.5.8 Debian
# updated by Joerg Jenderek at Oct 2008
# variables according to grub-0.97/stage1/stage1.S or
# http://www.gnu.org/software/grub/manual/grub.html#Embedded-data
# usual values are marked with comments to get only informations of strange GRUB loaders
>342		search/60	\0Geom\0	
#>0		ulelong		x		%x=0x009048EB ,	0x2a9048EB  0
>>0x41		ubyte		<2		
>>>0x3E		ubyte		>2		\b; GRand Unified Bootloader
# 0x3 for 0.5.95,0.93,0.94,0.96 0x4 for 1.90 
>>>>0x3E	ubyte		x		\b, stage1 version 0x%x
#If it is 0xFF, use a drive passed by BIOS
>>>>0x40	ubyte		<0xFF		\b, boot drive 0x%x
# in most case 0,1,0x2e for GRUB 0.5.95
>>>>0x41	ubyte		>0		\b, LBA flag 0x%x
>>>>0x42	uleshort	<0x8000		\b, stage2 address 0x%x
#>>>>0x42	uleshort	=0x8000		\b, stage2 address 0x%x (usual)
>>>>0x42	uleshort	>0x8000		\b, stage2 address 0x%x
#>>>>0x44	ulelong		=1		\b, 1st sector stage2 0x%x (default)
>>>>0x44	ulelong		>1		\b, 1st sector stage2 0x%x
>>>>0x48	uleshort	<0x800		\b, stage2 segment 0x%x
#>>>>0x48	uleshort	=0x800		\b, stage2 segment 0x%x (usual)
>>>>0x48	uleshort	>0x800		\b, stage2 segment 0x%x
>>>>402		string	Geom\0Hard\ Disk\0Read\0\ Error\0
>>>>>394	string	stage1			\b, GRUB version 0.5.95
>>>>382		string	Geom\0Hard\ Disk\0Read\0\ Error\0
>>>>>376	string	GRUB\ \0		\b, GRUB version 0.93 or 1.94
>>>>383		string	Geom\0Hard\ Disk\0Read\0\ Error\0
>>>>>377	string	GRUB\ \0		\b, GRUB version 0.94
>>>>385		string	Geom\0Hard\ Disk\0Read\0\ Error\0
>>>>>379	string	GRUB\ \0		\b, GRUB version 0.95 or 0.96
>>>>391		string	Geom\0Hard\ Disk\0Read\0\ Error\0
>>>>>385	string	GRUB\ \0		\b, GRUB version 0.97
#unkown version
>>>343		string	Geom\0Read\0\ Error\0	
>>>>321		string	Loading\ stage1.5	\b, GRUB version x.y
>>>380		string	Geom\0Hard\ Disk\0Read\0\ Error\0
>>>>374		string	GRUB\ \0		\b, GRUB version n.m
# http://syslinux.zytor.com/
>478	string	Boot\ failed\r			
>>495	string	LDLINUX\ SYS			\b, SYSLINUX bootloader (1.62)
>480	string	Boot\ failed\r			
>>495	string	LDLINUX\ SYS			\b, SYSLINUX bootloader (2.06 or 2.11)
>484	string	Boot\ error\r			\b, SYSLINUX bootloader (3.11)
>395	string	chksum\0\ ERROR!\0		\b, Gujin bootloader
# http://www.bcdwb.de/bcdw/index_e.htm
>3	string	BCDL				
>>498	string	BCDL\ \ \ \ BIN			\b, Bootable CD Loader (1.50Z)
# mbr partion table entries
# OEM-ID does not contain MicroSoft,NEWLDR,DOS,SYSLINUX,or MTOOLs
>3			string		!MS
>>3			string		!SYSLINUX
>>>3			string		!MTOOL
>>>>3			string		!NEWLDR
>>>>>5			string		!DOS
# not FAT (32 bit)
>>>>>>82		string		!FAT32
#not Linux kernel
>>>>>>>514		string		!HdrS
#not BeOS
>>>>>>>>422		string		!Be\ Boot\ Loader
# active flag 0 or 0x80 and type > 0
>>>>>>>>>446		ubyte		<0x81	
>>>>>>>>>>446		ubyte&0x7F	0	
>>>>>>>>>>>450		ubyte		>0	\b; partition 1: ID=0x%x
>>>>>>>>>>>>446		ubyte		0x80	\b, active
>>>>>>>>>>>>447		ubyte		x	\b, starthead %u
#>>>>>>>>>>>>448		ubyte		x	\b, start C_S: 0x%x
#>>>>>>>>>>>>448		ubeshort&1023	x	\b, startcylinder? %d
>>>>>>>>>>>>454		ulelong		x	\b, startsector %u
>>>>>>>>>>>>458		ulelong		x	\b, %u sectors
#
>>>>>>>>>462		ubyte		<0x81	
>>>>>>>>>>462		ubyte&0x7F	0		
>>>>>>>>>>>466		ubyte		>0	\b; partition 2: ID=0x%x
>>>>>>>>>>>>462		ubyte		0x80	\b, active
>>>>>>>>>>>>463		ubyte		x	\b, starthead %u
#>>>>>>>>>>>>464		ubyte		x	\b, start C_S: 0x%x
#>>>>>>>>>>>>464		ubeshort&1023	x	\b, startcylinder? %d
>>>>>>>>>>>>470		ulelong		x	\b, startsector %u
>>>>>>>>>>>>474		ulelong		x	\b, %u sectors
#
>>>>>>>>>478		ubyte		<0x81		
>>>>>>>>>>478		ubyte&0x7F	0		
>>>>>>>>>>>482		ubyte		>0	\b; partition 3: ID=0x%x
>>>>>>>>>>>>478		ubyte		0x80	\b, active
>>>>>>>>>>>>479		ubyte		x	\b, starthead %u
#>>>>>>>>>>>>480		ubyte		x	\b, start C_S: 0x%x
#>>>>>>>>>>>>481		ubyte		x	\b, start C2S: 0x%x
#>>>>>>>>>>>>480		ubeshort&1023	x	\b, startcylinder? %d
>>>>>>>>>>>>486		ulelong		x	\b, startsector %u
>>>>>>>>>>>>490		ulelong		x	\b, %u sectors
#
>>>>>>>>>494		ubyte		<0x81	
>>>>>>>>>>494		ubyte&0x7F	0		
>>>>>>>>>>>498		ubyte		>0	\b; partition 4: ID=0x%x
>>>>>>>>>>>>494		ubyte		0x80	\b, active
>>>>>>>>>>>>495		ubyte		x	\b, starthead %u
#>>>>>>>>>>>>496		ubyte		x	\b, start C_S: 0x%x
#>>>>>>>>>>>>496		ubeshort&1023	x	\b, startcylinder? %d
>>>>>>>>>>>>502		ulelong		x	\b, startsector %u
>>>>>>>>>>>>506		ulelong		x	\b, %u sectors
# mbr partion table entries end
# http://www.acronis.de/
#FAT label=ACRONIS\ SZ
#OEM-ID=BOOTWIZ0
>442	string	Non-system\ disk,\ 	
>>459	string	press\ any\ key...\x7\0		\b, Acronis Startup Recovery Loader
# DOS names like F11.SYS are 8 right space padded bytes+3 bytes
>>>477		ubyte&0xDF	>0		
>>>>477		string		x 		\b %-.3s
>>>>>480	ubyte&0xDF	>0		
>>>>>>480	string		x 		\b%-.5s
>>>>485		ubyte&0xDF	>0		
>>>>>485	string		x 		\b.%-.3s
#
>185	string	FDBOOT\ Version\ 			
>>204	string	\rNo\ Systemdisk.\ 			
>>>220	string	Booting\ from\ harddisk.\n\r		
>>>245	string	Cannot\ load\ from\ harddisk.\n\r	
>>>>273 string	Insert\ Systemdisk\ 			
>>>>>291 string and\ press\ any\ key.\n\r		\b, FDBOOT harddisk Bootloader
>>>>>>200 string	>\0                             \b, version %-3s
>242	string	Bootsector\ from\ C.H.\ Hochst\204	
>>278	string	No\ Systemdisk.\ 			
>>>293	string	Booting\ from\ harddisk.\n\r		
>>>441	string	Cannot\ load\ from\ harddisk.\n\r	
>>>>469 string	Insert\ Systemdisk\ 			
>>>>>487 string and\ press\ any\ key.\n\r		\b, WinImage harddisk Bootloader
>>>>>>209 string	>\0                             \b, version %-4.4s
>(1.b+2)	ubyte		0xe			
>>(1.b+3)	ubyte		0x1f			
>>>(1.b+4)	ubyte		0xbe			
>>>>(1.b+5)	ubyte		0x77			
>>>>(1.b+6)	ubyte		0x7c			
>>>>>(1.b+7)	ubyte		0xac			
>>>>>>(1.b+8)	ubyte		0x22			
>>>>>>>(1.b+9)	ubyte		0xc0			
>>>>>>>>(1.b+10)	ubyte	0x74			
>>>>>>>>>(1.b+11)	ubyte	0xb			
>>>>>>>>>>(1.b+12)	ubyte	0x56			
>>>>>>>>>>(1.b+13)	ubyte	0xb4			\b, mkdosfs boot message display
>214	string	Please\ try\ to\ install\ FreeDOS\ 	\b, DOS Emulator boot message display
#>>244	string	from\ dosemu-freedos-*-bin.tgz\r	
#>>>170	string	Sorry,\ could\ not\ load\ an\ 		
#>>>>195	string	operating\ system.\r\n		
#
>103	string	This\ is\ not\ a\ bootable\ disk.\ 	
>>132	string	Please\ insert\ a\ bootable\ 		
>>>157	string	floppy\ and\r\n				
>>>>169	string	press\ any\ key\ to\ try\ again...\r	\b, FREE-DOS message display
#
>66	string	Solaris\ Boot\ Sector    		
>>99	string	Incomplete\ MDBoot\ load.		
>>>89	string	Version 				\b, Sun Solaris Bootloader
>>>>97	byte	x					version %c
#
>408	string	OS/2\ !!\ SYS01475\r\0			
>>429	string	OS/2\ !!\ SYS02025\r\0			
>>>450	string	OS/2\ !!\ SYS02027\r\0			
>>>469	string	OS2BOOT\ \ \ \ 				\b, IBM OS/2 Warp bootloader
#
>409	string	OS/2\ !!\ SYS01475\r\0			
>>430	string	OS/2\ !!\ SYS02025\r\0			
>>>451	string	OS/2\ !!\ SYS02027\r\0			
>>>470	string	OS2BOOT\ \ \ \ 				\b, IBM OS/2 Warp Bootloader
>112		string	This\ disk\ is\ not\ bootable\r			
>>142		string	If\ you\ wish\ to\ make\ it\ bootable		
>>>176		string	run\ the\ DOS\ program\ SYS\  			
>>>200		string	after\ the\r					
>>>>216		string	system\ has\ been\ loaded\r\n			
>>>>>242	string	Please\ insert\ a\ DOS\ diskette\ 		
>>>>>271	string	into\r\n\ the\ drive\ and\ 			
>>>>>>292	string	strike\ any\ key...\0		\b, IBM OS/2 Warp message display
# XP
>430	string	NTLDR\ is\ missing\xFF\r\n		
>>449	string	Disk\ error\xFF\r\n			
>>>462	string	Press\ any\ key\ to\ restart\r		\b, Microsoft Windows XP Bootloader
# DOS names like NTLDR,CMLDR,$LDR$ are 8 right space padded bytes+3 bytes
>>>>417		ubyte&0xDF	>0			
>>>>>417	string		x			%-.5s
>>>>>>422	ubyte&0xDF	>0			
>>>>>>>422	string		x 			\b%-.3s
>>>>>425	ubyte&0xDF	>0			
>>>>>>425	string		>\ 			\b.%-.3s
#
>>>>371		ubyte		>0x20			
>>>>>368	ubyte&0xDF	>0			
>>>>>>368	string		x 			%-.5s
>>>>>>>373	ubyte&0xDF	>0			
>>>>>>>>373	string		x 			\b%-.3s
>>>>>>376	ubyte&0xDF	>0			
>>>>>>>376	string		x 			\b.%-.3s
#
>430	string	NTLDR\ nicht\ gefunden\xFF\r\n		
>>453	string	Datentr\204gerfehler\xFF\r\n		
>>>473	string	Neustart\ mit\ beliebiger\ Taste\r	\b, Microsoft Windows XP Bootloader (german)
>>>>417		ubyte&0xDF	>0			
>>>>>417	string		x			%-.5s
>>>>>>422	ubyte&0xDF	>0			
>>>>>>>422	string		x 			\b%-.3s
>>>>>425	ubyte&0xDF	>0			
>>>>>>425	string		>\ 			\b.%-.3s
# offset variant
>>>>379	string	\0					
>>>>>368	ubyte&0xDF	>0			
>>>>>>368	string		x 			%-.5s
>>>>>>>373	ubyte&0xDF	>0			
>>>>>>>>373	string		x 			\b%-.3s
#
>430	string	NTLDR\ fehlt\xFF\r\n			
>>444	string	Datentr\204gerfehler\xFF\r\n		
>>>464	string	Neustart\ mit\ beliebiger\ Taste\r	\b, Microsoft Windows XP Bootloader (2.german)
>>>>417		ubyte&0xDF	>0			
>>>>>417	string		x			%-.5s
>>>>>>422	ubyte&0xDF	>0			
>>>>>>>422	string		x 			\b%-.3s
>>>>>425	ubyte&0xDF	>0			
>>>>>>425	string		>\ 			\b.%-.3s
# variant
>>>>371		ubyte		>0x20			
>>>>>368	ubyte&0xDF	>0			
>>>>>>368	string		x 			%-.5s
>>>>>>>373	ubyte&0xDF	>0			
>>>>>>>>373	string		x 			\b%-.3s
>>>>>>376	ubyte&0xDF	>0			
>>>>>>>376	string		x 			\b.%-.3s
#
>430	string	NTLDR\ fehlt\xFF\r\n			
>>444	string	Medienfehler\xFF\r\n			
>>>459	string	Neustart:\ Taste\ dr\201cken\r		\b, Microsoft Windows XP Bootloader (3.german)
>>>>371		ubyte		>0x20			
>>>>>368	ubyte&0xDF	>0			
>>>>>>368	string		x 			%-.5s
>>>>>>>373	ubyte&0xDF	>0			
>>>>>>>>373	string		x 			\b%-.3s
>>>>>>376	ubyte&0xDF	>0			
>>>>>>>376	string		x 			\b.%-.3s
# variant
>>>>417		ubyte&0xDF	>0			
>>>>>417	string		x			%-.5s
>>>>>>422	ubyte&0xDF	>0			
>>>>>>>422	string		x 			\b%-.3s
>>>>>425	ubyte&0xDF	>0			
>>>>>>425	string		>\ 			\b.%-.3s
#
>430	string	Datentr\204ger\ entfernen\xFF\r\n	
>>454	string	Medienfehler\xFF\r\n			
>>>469	string	Neustart:\ Taste\ dr\201cken\r		\b, Microsoft Windows XP Bootloader (4.german)
>>>>379		string		\0			
>>>>>368	ubyte&0xDF	>0			
>>>>>>368	string		x 			%-.5s
>>>>>>>373	ubyte&0xDF	>0			
>>>>>>>>373	string		x 			\b%-.3s
>>>>>>376	ubyte&0xDF	>0			
>>>>>>>376	string		x 			\b.%-.3s
# variant
>>>>417		ubyte&0xDF	>0			
>>>>>417	string		x			%-.5s
>>>>>>422	ubyte&0xDF	>0			
>>>>>>>422	string		x 			\b%-.3s
>>>>>425	ubyte&0xDF	>0			
>>>>>>425	string		>\ 			\b.%-.3s
#

#>3	string	NTFS\ \ \ \ 				
>389	string	Fehler\ beim\ Lesen\ 
>>407	string	des\ Datentr\204gers
>>>426	string	NTLDR\ fehlt				
>>>>440	string	NTLDR\ ist\ komprimiert
>>>>>464 string	Neustart\ mit\ Strg+Alt+Entf\r		\b, Microsoft Windows XP Bootloader NTFS (german)
#>3	string	NTFS\ \ \ \ 				
>313	string	A\ disk\ read\ error\ occurred.\r
>>345	string	A\ kernel\ file\ is\ missing\ 	
>>>370	string	from\ the\ disk.\r		
>>>>484	string	NTLDR\ is\ compressed		
>>>>>429 string	Insert\ a\ system\ diskette\ 	
>>>>>>454 string and\ restart\r\nthe\ system.\r		\b, Microsoft Windows XP Bootloader NTFS
# DOS loader variants different languages,offsets
>472	ubyte&0xDF	>0
>>389	string	Invalid\ system\ disk\xFF\r\n		
>>>411	string	Disk\ I/O\ error			
>>>>428	string	Replace\ the\ disk,\ and\ 		
>>>>>455 string	press\ any\ key				\b, Microsoft Windows 98 Bootloader
#IO.SYS
>>>>>>472	ubyte&0xDF	>0			
>>>>>>>472	string		x 			\b %-.2s
>>>>>>>>474	ubyte&0xDF	>0			
>>>>>>>>>474	string		x 			\b%-.5s
>>>>>>>>>>479	ubyte&0xDF	>0			
>>>>>>>>>>>479 string		x 			\b%-.1s
>>>>>>>480	ubyte&0xDF	>0			
>>>>>>>>480	string		x 			\b.%-.3s
#MSDOS.SYS
>>>>>>>483	ubyte&0xDF	>0			\b+
>>>>>>>>483	string		x 			\b%-.5s
>>>>>>>>>488	ubyte&0xDF	>0			
>>>>>>>>>>488	string		x 			\b%-.3s
>>>>>>>>491	ubyte&0xDF	>0			
>>>>>>>>>491	string		x 			\b.%-.3s
#
>>390	string	Invalid\ system\ disk\xFF\r\n		
>>>412	string	Disk\ I/O\ error\xFF\r\n		
>>>>429	string	Replace\ the\ disk,\ and\ 		
>>>>>451 string	then\ press\ any\ key\r			\b, Microsoft Windows 98 Bootloader
>>388	string	Ungueltiges\ System\ \xFF\r\n		
>>>410	string	E/A-Fehler\ \ \ \ \xFF\r\n		
>>>>427	string	Datentraeger\ wechseln\ und\ 		
>>>>>453 string	Taste\ druecken\r			\b, Microsoft Windows 95/98/ME Bootloader (german)
#WINBOOT.SYS only not spaces (0xDF)
>>>>>>497	ubyte&0xDF	>0			
>>>>>>>497	string		x 			%-.5s
>>>>>>>>502	ubyte&0xDF	>0			
>>>>>>>>>502	string		x 			\b%-.1s
>>>>>>>>>>503	ubyte&0xDF	>0			
>>>>>>>>>>>503	string		x 			\b%-.1s
>>>>>>>>>>>>504	ubyte&0xDF	>0			
>>>>>>>>>>>>>504 string		x 			\b%-.1s
>>>>>>505	ubyte&0xDF	>0			
>>>>>>>505	string		x 			\b.%-.3s
#IO.SYS
>>>>>>472	ubyte&0xDF	>0			or
>>>>>>>472	string		x 			\b %-.2s
>>>>>>>>474	ubyte&0xDF	>0			
>>>>>>>>>474	string		x 			\b%-.5s
>>>>>>>>>>479	ubyte&0xDF	>0			
>>>>>>>>>>>479 string		x 			\b%-.1s
>>>>>>>480	ubyte&0xDF	>0			
>>>>>>>>480	string		x 			\b.%-.3s
#MSDOS.SYS
>>>>>>>483	ubyte&0xDF	>0			\b+
>>>>>>>>483	string		x 			\b%-.5s
>>>>>>>>>488	ubyte&0xDF	>0			
>>>>>>>>>>488	string		x 			\b%-.3s
>>>>>>>>491	ubyte&0xDF	>0			
>>>>>>>>>491	string		x 			\b.%-.3s
#
>>390	string	Ungueltiges\ System\ \xFF\r\n		
>>>412	string	E/A-Fehler\ \ \ \ \xFF\r\n		
>>>>429	string	Datentraeger\ wechseln\ und\ 		
>>>>>455 string	Taste\ druecken\r			\b, Microsoft Windows 95/98/ME Bootloader (German)
#WINBOOT.SYS only not spaces (0xDF)
>>>>>>497	ubyte&0xDF	>0			
>>>>>>>497	string		x 			%-.7s
>>>>>>>>504	ubyte&0xDF	>0			
>>>>>>>>>504	string		x 			\b%-.1s
>>>>>>505	ubyte&0xDF	>0			
>>>>>>>505	string		x 			\b.%-.3s
#IO.SYS
>>>>>>472	ubyte&0xDF	>0			or
>>>>>>>472	string		x 			\b %-.2s
>>>>>>>>474	ubyte&0xDF	>0			
>>>>>>>>>474	string		x 			\b%-.6s
>>>>>>>480	ubyte&0xDF	>0			
>>>>>>>>480	string		x 			\b.%-.3s
#MSDOS.SYS
>>>>>>>483	ubyte&0xDF	>0			\b+
>>>>>>>>483	string		x 			\b%-.5s
>>>>>>>>>488	ubyte&0xDF	>0			
>>>>>>>>>>488	string		x 			\b%-.3s
>>>>>>>>491	ubyte&0xDF	>0			
>>>>>>>>>491	string		x 			\b.%-.3s
#
>>389	string	Ungueltiges\ System\ \xFF\r\n		
>>>411	string	E/A-Fehler\ \ \ \ \xFF\r\n		
>>>>428	string	Datentraeger\ wechseln\ und\ 		
>>>>>454 string	Taste\ druecken\r			\b, Microsoft Windows 95/98/ME Bootloader (GERMAN)
# DOS names like IO.SYS,WINBOOT.SYS,MSDOS.SYS,WINBOOT.INI are 8 right space padded bytes+3 bytes
>>>>>>472	string		x 			%-.2s
>>>>>>>474	ubyte&0xDF	>0			
>>>>>>>>474	string		x 			\b%-.5s
>>>>>>>>479	ubyte&0xDF	>0			
>>>>>>>>>479	string		x 			\b%-.1s
>>>>>>480	ubyte&0xDF	>0			
>>>>>>>480	string		x 			\b.%-.3s
>>>>>>483	ubyte&0xDF	>0			\b+
>>>>>>>483	string		x 			\b%-.5s
>>>>>>>488	ubyte&0xDF	>0			
>>>>>>>>488	string		x 			\b%-.2s
>>>>>>>>490	ubyte&0xDF	>0			
>>>>>>>>>490	string		x 			\b%-.1s
>>>>>>>491	ubyte&0xDF	>0			
>>>>>>>>491	string		x 			\b.%-.3s
>479	ubyte&0xDF	>0
>>416	string	Kein\ System\ oder\ 			
>>>433	string	Laufwerksfehler				
>>>>450	string	Wechseln\ und\ Taste\ dr\201cken	\b, Microsoft DOS Bootloader (german)
#IO.SYS
>>>>>479	string		x 			\b %-.2s
>>>>>>481	ubyte&0xDF	>0			
>>>>>>>481	string		x 			\b%-.6s
>>>>>487	ubyte&0xDF	>0			
>>>>>>487	string		x 			\b.%-.3s
#MSDOS.SYS
>>>>>>490	ubyte&0xDF	>0			\b+
>>>>>>>490	string		x 			\b%-.5s
>>>>>>>>495	ubyte&0xDF	>0			
>>>>>>>>>495	string		x 			\b%-.3s
>>>>>>>498	ubyte&0xDF	>0			
>>>>>>>>498	string		x 			\b.%-.3s
#
>376	search/41	Non-System\ disk\ or\ 		
>>395	search/41	disk\ error\r			
>>>407	search/41	Replace\ and\ 			
>>>>419	search/41	press\ 				\b,
>>>>419	search/41	strike\ 			\b, old
>>>>426	search/41	any\ key\ when\ ready\r		MS or PC-DOS bootloader
#449			Disk\ Boot\ failure\r		MS 3.21
#466			Boot\ Failure\r			MS 3.30
>>>>>468 search/18	\0				
#IO.SYS,IBMBIO.COM
>>>>>>&0	string		x 			\b %-.2s
>>>>>>>&-20	ubyte&0xDF	>0			
>>>>>>>>&-1	string		x 			\b%-.4s
>>>>>>>>>&-16	ubyte&0xDF	>0			
>>>>>>>>>>&-1	string		x 			\b%-.2s
>>>>>>&8	ubyte&0xDF	>0			\b.
>>>>>>>&-1	string		x 			\b%-.3s
#MSDOS.SYS,IBMDOS.COM
>>>>>>&11	ubyte&0xDF	>0			\b+
>>>>>>>&-1	string		x 			\b%-.5s
>>>>>>>>&-6	ubyte&0xDF	>0			
>>>>>>>>>&-1	string		x 			\b%-.1s
>>>>>>>>>>&-5	ubyte&0xDF	>0			
>>>>>>>>>>>&-1	string		x 			\b%-.2s
>>>>>>>&7	ubyte&0xDF	>0			\b.
>>>>>>>>&-1	string		x 			\b%-.3s
>441	string	Cannot\ load\ from\ harddisk.\n\r
>>469	string	Insert\ Systemdisk\ 			
>>>487	string	and\ press\ any\ key.\n\r		\b, MS (2.11) DOS bootloader
#>43	string	\224R-LOADER\ \ SYS			=label					
>54	string	SYS
>>324	string	VASKK
>>>495	string	NEWLDR\0				\b, DR-DOS Bootloader (LOADER.SYS)
#
>98	string	Press\ a\ key\ to\ retry\0\r		
>>120	string	Cannot\ find\ file\ \0\r		
>>>139	string	Disk\ read\ error\0\r			
>>>>156	string	Loading\ ...\0				\b, DR-DOS (3.41) Bootloader
#DRBIOS.SYS
>>>>>44		ubyte&0xDF	>0			
>>>>>>44	string		x			\b %-.6s
>>>>>>>50	ubyte&0xDF	>0			
>>>>>>>>50	string		x 			\b%-.2s
>>>>>>52	ubyte&0xDF	>0			
>>>>>>>52	string		x 			\b.%-.3s
#
>70	string	IBMBIO\ \ COM				
>>472	string	Cannot\ load\ DOS!\ 			
>>>489	string	Any\ key\ to\ retry			\b, DR-DOS Bootloader
>>471	string	Cannot\ load\ DOS\ 			
>>487	string	press\ key\ to\ retry			\b, Open-DOS Bootloader
#??
>444	string	KERNEL\ \ SYS					
>>314	string	BOOT\ error!				\b, FREE-DOS Bootloader
>499	string	KERNEL\ \ SYS				
>>305	string	BOOT\ err!\0				\b, Free-DOS Bootloader
>449	string	KERNEL\ \ SYS				
>>319	string	BOOT\ error!				\b, FREE-DOS 0.5 Bootloader
#
>449	string	Loading\ FreeDOS			
>>0x1AF		ulelong		>0			\b, FREE-DOS 0.95,1.0 Bootloader
>>>497		ubyte&0xDF	>0			
>>>>497		string		x 			\b %-.6s
>>>>>503	ubyte&0xDF	>0			
>>>>>>503	string		x 			\b%-.1s
>>>>>>>504	ubyte&0xDF	>0			
>>>>>>>>504	string		x 			\b%-.1s
>>>>505		ubyte&0xDF	>0			
>>>>>505	string		x 			\b.%-.3s
#
>331	string	Error!.0				\b, FREE-DOS 1.0 bootloader
#
>125	string	Loading\ FreeDOS...\r			
>>311	string	BOOT\ error!\r				\b, FREE-DOS bootloader
>>>441		ubyte&0xDF	>0			
>>>>441		string		x 			\b %-.6s
>>>>>447	ubyte&0xDF	>0			
>>>>>>447	string		x 			\b%-.1s
>>>>>>>448	ubyte&0xDF	>0			
>>>>>>>>448	string		x 			\b%-.1s
>>>>449		ubyte&0xDF	>0			
>>>>>449	string		x 			\b.%-.3s
>124	string	FreeDOS\0				
>>331	string	\ err\0					\b, FREE-DOS BETa 0.9 Bootloader
# DOS names like KERNEL.SYS,KERNEL16.SYS,KERNEL32.SYS,METAKERN.SYS are 8 right space padded bytes+3 bytes
>>>497		ubyte&0xDF	>0			
>>>>497		string		x 			\b %-.6s
>>>>>503	ubyte&0xDF	>0			
>>>>>>503	string		x 			\b%-.1s
>>>>>>>504	ubyte&0xDF	>0			
>>>>>>>>504	string		x 			\b%-.1s
>>>>505		ubyte&0xDF	>0			
>>>>>505	string		x 			\b.%-.3s
>>333	string	\ err\0					\b, FREE-DOS BEta 0.9 Bootloader
>>>497		ubyte&0xDF	>0			
>>>>497		string		x 			\b %-.6s
>>>>>503	ubyte&0xDF	>0			
>>>>>>503	string		x 			\b%-.1s
>>>>>>>504	ubyte&0xDF	>0			
>>>>>>>>504	string		x 			\b%-.1s
>>>>505		ubyte&0xDF	>0			
>>>>>505	string		x 			\b.%-.3s
>>334	string	\ err\0					\b, FREE-DOS Beta 0.9 Bootloader
>>>497		ubyte&0xDF	>0			
>>>>497		string		x 			\b %-.6s
>>>>>503	ubyte&0xDF	>0			
>>>>>>503	string		x 			\b%-.1s
>>>>>>>504	ubyte&0xDF	>0			
>>>>>>>>504	string		x 			\b%-.1s
>>>>505		ubyte&0xDF	>0			
>>>>>505	string		x 			\b.%-.3s
>336	string	Error!\ 				
>>343	string	Hit\ a\ key\ to\ reboot.		\b, FREE-DOS Beta 0.9sr1 Bootloader
>>>497		ubyte&0xDF	>0			
>>>>497		string		x 			\b %-.6s
>>>>>503	ubyte&0xDF	>0			
>>>>>>503	string		x 			\b%-.1s
>>>>>>>504	ubyte&0xDF	>0			
>>>>>>>>504	string		x 			\b%-.1s
>>>>505		ubyte&0xDF	>0			
>>>>>505	string		x 			\b.%-.3s
# added by Joerg Jenderek
# http://www.visopsys.org/
# http://partitionlogic.org.uk/
# OEM-ID=Visopsys
>478		ulelong	0					
>>(1.b+326)	string	I/O\ Error\ reading\ 			
>>>(1.b+344)	string	Visopsys\ loader\r			
>>>>(1.b+361)	string	Press\ any\ key\ to\ continue.\r	\b, Visopsys loader
# http://alexfru.chat.ru/epm.html#bootprog
>494	ubyte	>0x4D					
>>495	string	>E					
>>>495	string	<S					
#OEM-ID is not reliable
>>>>3	string	BootProg				
# It just looks for a program file name at the root directory
# and loads corresponding file with following execution.
# DOS names like STARTUP.BIN,STARTUPC.COM,STARTUPE.EXE are 8 right space padded bytes+3 bytes
>>>>499			ubyte&0xDF	>0		\b, COM/EXE Bootloader
>>>>>499		string		x 		\b %-.1s
>>>>>>500		ubyte&0xDF	>0		
>>>>>>>500		string		x 		\b%-.1s
>>>>>>>>501		ubyte&0xDF	>0		
>>>>>>>>>501		string		x 		\b%-.1s
>>>>>>>>>>502		ubyte&0xDF	>0		
>>>>>>>>>>>502		string		x 		\b%-.1s
>>>>>>>>>>>>503		ubyte&0xDF	>0		
>>>>>>>>>>>>>503	string		x 		\b%-.1s
>>>>>>>>>>>>>>504	ubyte&0xDF	>0		
>>>>>>>>>>>>>>>504	string		x 		\b%-.1s
>>>>>>>>>>>>>>>>505	ubyte&0xDF	>0		
>>>>>>>>>>>>>>>>>505	string		x 		\b%-.1s
>>>>>>>>>>>>>>>>>>506	ubyte&0xDF	>0		
>>>>>>>>>>>>>>>>>>>506	string		x 		\b%-.1s
#name extension
>>>>>507		ubyte&0xDF	>0		\b.
>>>>>>507		string		x 		\b%-.1s
>>>>>>>508		ubyte&0xDF	>0		
>>>>>>>>508		string		x 		\b%-.1s
>>>>>>>>>509		ubyte&0xDF	>0		
>>>>>>>>>>509		string		x 		\b%-.1s
#If the boot sector fails to read any other sector,
#it prints a very short message ("RE") to the screen and hangs the computer.
#If the boot sector fails to find needed program in the root directory,
#it also hangs with another message ("NF").
>>>>>492		string		RENF		\b, FAT (12 bit)
>>>>>495		string		RENF		\b, FAT (16 bit)
# http://alexfru.chat.ru/epm.html#bootprog
>494	ubyte	>0x4D					
>>495	string	>E					
>>>495	string	<S					
#OEM-ID is not reliable
>>>>3	string	BootProg				
# It just looks for a program file name at the root directory
# and loads corresponding file with following execution.
# DOS names like STARTUP.BIN,STARTUPC.COM,STARTUPE.EXE are 8 right space padded bytes+3 bytes
>>>>499			ubyte&0xDF	>0		\b, COM/EXE Bootloader
>>>>>499		string		x 		\b %-.1s
>>>>>>500		ubyte&0xDF	>0		
>>>>>>>500		string		x 		\b%-.1s
>>>>>>>>501		ubyte&0xDF	>0		
>>>>>>>>>501		string		x 		\b%-.1s
>>>>>>>>>>502		ubyte&0xDF	>0		
>>>>>>>>>>>502		string		x 		\b%-.1s
>>>>>>>>>>>>503		ubyte&0xDF	>0		
>>>>>>>>>>>>>503	string		x 		\b%-.1s
>>>>>>>>>>>>>>504	ubyte&0xDF	>0		
>>>>>>>>>>>>>>>504	string		x 		\b%-.1s
>>>>>>>>>>>>>>>>505	ubyte&0xDF	>0		
>>>>>>>>>>>>>>>>>505	string		x 		\b%-.1s
>>>>>>>>>>>>>>>>>>506	ubyte&0xDF	>0		
>>>>>>>>>>>>>>>>>>>506	string		x 		\b%-.1s
#name extension
>>>>>507		ubyte&0xDF	>0		\b.
>>>>>>507		string		x 		\b%-.1s
>>>>>>>508		ubyte&0xDF	>0		
>>>>>>>>508		string		x 		\b%-.1s
>>>>>>>>>509		ubyte&0xDF	>0		
>>>>>>>>>>509		string		x 		\b%-.1s
#If the boot sector fails to read any other sector,
#it prints a very short message ("RE") to the screen and hangs the computer.
#If the boot sector fails to find needed program in the root directory,
#it also hangs with another message ("NF").
>>>>>492		string		RENF		\b, FAT (12 bit)
>>>>>495		string		RENF		\b, FAT (16 bit)
# x86 bootloader end
# updated by Joerg Jenderek at Sep 2007
>3	ubyte	0			
#no active flag
>>446	ubyte	0			
# partition 1 not empty
>>>450	ubyte	>0			
# partitions 3,4 empty
>>>>482		ubyte	0			
>>>>>498	ubyte	0			
# partition 2 ID=0,5,15
>>>>>>466	ubyte	<0x10			
>>>>>>>466	ubyte	0x05			\b, extended partition table
>>>>>>>466	ubyte	0x0F			\b, extended partition table (LBA)
>>>>>>>466	ubyte	0x0			\b, extended partition table (last)	
# JuMP short     bootcodeoffset NOP assembler instructions will usually be EB xx 90
# http://mirror.href.com/thestarman/asm/2bytejumps.htmm#FWD
# older drives may use Near JuMP instruction E9 xx xx
>0		lelong&0x009000EB	0x009000EB 
>0		lelong&0x000000E9	0x000000E9 
# minimal short forward jump found 03cx??
# maximal short forward jump is 07fx
>1		ubyte			<0xff	\b, code offset 0x%x
# mtools-3.9.8/msdos.h
# usual values are marked with comments to get only informations of strange FAT systems
# valid sectorsize must be a power of 2 from 32 to 32768
>>11		uleshort&0x000f	x		
>>>11		uleshort	<32769		
>>>>11		uleshort	>31		
>>>>>21		ubyte&0xf0	0xF0		
>>>>>>3		string		>\0		\b, OEM-ID "%8.8s"
#http://mirror.href.com/thestarman/asm/debug/debug2.htm#IHC
>>>>>>>8	string		IHC		\b cached by Windows 9M
>>>>>>11	uleshort	>512		\b, Bytes/sector %u
#>>>>>>11	uleshort	=512		\b, Bytes/sector %u=512 (usual)
>>>>>>11	uleshort	<512		\b, Bytes/sector %u
>>>>>>13	ubyte		>1		\b, sectors/cluster %u
#>>>>>>13	ubyte		=1		\b, sectors/cluster %u (usual on Floppies)
>>>>>>14	uleshort	>32		\b, reserved sectors %u
#>>>>>>14	uleshort	=32		\b, reserved sectors %u (usual Fat32)
#>>>>>>14	uleshort	>1		\b, reserved sectors %u
#>>>>>>14	uleshort	=1		\b, reserved sectors %u (usual FAT12,FAT16)
>>>>>>14	uleshort	<1		\b, reserved sectors %u
>>>>>>16	ubyte		>2		\b, FATs %u
#>>>>>>16	ubyte		=2		\b, FATs %u (usual)
>>>>>>16	ubyte		=1		\b, FAT  %u
>>>>>>16	ubyte		>0
>>>>>>17	uleshort	>0		\b, root entries %u
#>>>>>>17	uleshort	=0		\b, root entries %u=0 (usual Fat32)
>>>>>>19	uleshort	>0		\b, sectors %u (volumes <=32 MB) 
#>>>>>>19	uleshort	=0		\b, sectors %u=0 (usual Fat32)
>>>>>>21	ubyte		>0xF0		\b, Media descriptor 0x%x
#>>>>>>21	ubyte		=0xF0		\b, Media descriptor 0x%x (usual floppy)
>>>>>>21	ubyte		<0xF0		\b, Media descriptor 0x%x
>>>>>>22	uleshort	>0		\b, sectors/FAT %u
#>>>>>>22	uleshort	=0		\b, sectors/FAT %u=0 (usual Fat32)
>>>>>>26	ubyte		>2		\b, heads %u
#>>>>>>26	ubyte		=2		\b, heads %u (usual floppy)
>>>>>>26	ubyte		=1		\b, heads %u
#skip for Digital Research DOS (version 3.41) 1440 kB Bootdisk
>>>>>>38	ubyte		!0x70		
>>>>>>>28	ulelong		>0		\b, hidden sectors %u
#>>>>>>>28	ulelong		=0		\b, hidden sectors %u (usual floppy)
>>>>>>>32	ulelong		>0		\b, sectors %u (volumes > 32 MB) 
#>>>>>>>32	ulelong		=0		\b, sectors %u (volumes > 32 MB)
# FAT<32 specific 
>>>>>>82	string		!FAT32
#>>>>>>>36	ubyte		0x80		\b, physical drive 0x%x=0x80 (usual harddisk)
#>>>>>>>36	ubyte		0		\b, physical drive 0x%x=0 (usual floppy)
>>>>>>>36	ubyte		!0x80		
>>>>>>>>36	ubyte		!0		\b, physical drive 0x%x
>>>>>>>37	ubyte		>0		\b, reserved 0x%x
#>>>>>>>37	ubyte		=0		\b, reserved 0x%x
>>>>>>>38	ubyte		>0x29		\b, dos < 4.0 BootSector (0x%x)
>>>>>>>38	ubyte		<0x29		\b, dos < 4.0 BootSector (0x%x)
>>>>>>>38	ubyte		=0x29
>>>>>>>>39	ulelong		x		\b, serial number 0x%x
>>>>>>>>43	string		<NO\ NAME	\b, label: "%11.11s"
>>>>>>>>43	string		>NO\ NAME	\b, label: "%11.11s"
>>>>>>>>43	string		=NO\ NAME	\b, unlabeled
>>>>>>>54	string		FAT		\b, FAT
>>>>>>>>54	string		FAT12		\b (12 bit)
>>>>>>>>54	string		FAT16		\b (16 bit)
# FAT32 specific
>>>>>>82	string		FAT32		\b, FAT (32 bit)
>>>>>>>36	ulelong		x		\b, sectors/FAT %u
>>>>>>>40	uleshort	>0		\b, extension flags %u
#>>>>>>>40	uleshort	=0		\b, extension flags %u
>>>>>>>42	uleshort	>0		\b, fsVersion %u
#>>>>>>>42	uleshort	=0		\b, fsVersion %u (usual)
>>>>>>>44	ulelong		>2		\b, rootdir cluster %u
#>>>>>>>44	ulelong		=2		\b, rootdir cluster %u
#>>>>>>>44	ulelong		=1		\b, rootdir cluster %u
>>>>>>>48	uleshort	>1		\b, infoSector %u
#>>>>>>>48	uleshort	=1		\b, infoSector %u (usual)
>>>>>>>48	uleshort	<1		\b, infoSector %u
>>>>>>>50	uleshort	>6		\b, Backup boot sector %u
#>>>>>>>50	uleshort	=6		\b, Backup boot sector %u (usual) 
>>>>>>>50	uleshort	<6		\b, Backup boot sector %u
>>>>>>>54	ulelong		>0		\b, reserved1 0x%x
>>>>>>>58	ulelong		>0		\b, reserved2 0x%x
>>>>>>>62	ulelong		>0		\b, reserved3 0x%x
# same structure as FAT1X 
>>>>>>>64	ubyte		>0x80		\b, physical drive 0x%x
#>>>>>>>64	ubyte		=0x80		\b, physical drive 0x%x=80 (usual harddisk)
>>>>>>>64	ubyte&0x7F	>0		\b, physical drive 0x%x
#>>>>>>>64	ubyte		=0		\b, physical drive 0x%x=0 (usual floppy)
>>>>>>>65	ubyte		>0		\b, reserved 0x%x
>>>>>>>66	ubyte		>0x29		\b, dos < 4.0 BootSector (0x%x)
>>>>>>>66	ubyte		<0x29		\b, dos < 4.0 BootSector (0x%x)
>>>>>>>66	ubyte		=0x29
>>>>>>>>67	ulelong		x		\b, serial number 0x%x
>>>>>>>>71	string		<NO\ NAME	\b, label: "%11.11s"
>>>>>>>71	string		>NO\ NAME	\b, label: "%11.11s"
>>>>>>>71	string		=NO\ NAME	\b, unlabeled
### FATs end
>0x200	lelong	0x82564557		\b, BSD disklabel



#--------------------------Firmware Formats---------------------------

# uImage file     
# From: Craig Heffner, U-Boot image.h header definitions file
0	belong	0x27051956	uImage header, header size: 64 bytes,
>4	belong	x		header CRC: 0x%X,
>8	bedate	x		created: %s,
>12	belong	x		image size: %d bytes,
>16	belong	x		Data Address: 0x%X,
>20	belong	x		Entry Point: 0x%X,
>24	belong	x		data CRC: 0x%X,
#>28	byte	x		OS type: %d,
>28	byte	0		OS: Invalid OS,
>28	byte	1		OS: OpenBSD,
>28	byte	2		OS: NetBSD,
>28	byte	3		OS: FreeBSD,
>28	byte	4		OS: 4.4BSD,
>28	byte	5		OS: Linux,
>28	byte	6		OS: SVR4,
>28	byte	7		OS: Esix,
>28	byte	8		OS: Solaris,
>28	byte	9		OS: Irix,
>28	byte	10		OS: SCO,
>28	byte	11		OS: Dell,
>28	byte	12		OS: NCR,
>28	byte	13		OS: LynxOS,
>28	byte	14		OS: VxWorks,
>28	byte	15		OS: pSOS,
>28	byte	16		OS: QNX,
>28	byte	17		OS: Firmware,
>28	byte	18		OS: RTEMS,
>28	byte	19		OS: ARTOS,
>28	byte	20		OS: Unity OS,
#>29	byte	x		CPU arch: %d,
>29	byte	0		CPU: Invalid OS,
>29	byte	1		CPU: Alpha,
>29	byte	2		CPU: ARM,
>29	byte	3		CPU: Intel x86,
>29	byte	4		CPU: IA64,
>29	byte	5		CPU: MIPS,
>29	byte	6		CPU: MIPS 64 bit,
>29	byte	7		CPU: PowerPC,
>29	byte	8		CPU: IBM S390,
>29	byte	9		CPU: SuperH,
>29	byte	10		CPU: Sparc,
>29	byte	11		CPU: Sparc 64 bit,
>29	byte	12		CPU: M68K,
>29	byte	13		CPU: Nios-32,
>29	byte	14		CPU: MicroBlaze,
>29	byte	15		CPU: Nios-II,
>29	byte	16		CPU: Blackfin,
>29	byte	17		CPU: AVR,
>29	byte	18		CPU: STMicroelectronics ST200,
#>30	byte	x		image type: %d,
>30	byte	0		image type: Invalid Image,
>30	byte	1		image type: Standalone Program,
>30	byte	2		image type: OS Kernel Image,
>30	byte 	3		image type: RAMDisk Image,
>30	byte	4		image type: Multi-File Image,
>30	byte	5		image type: Firmware Image,
>30	byte	6		image type: Script file,
>30	byte	7		image type: Filesystem Image,
>30	byte	8		image type: Binary Flat Device Tree Blob
#>31	byte	x		compression type: %d,
>31	byte	0		compression type: none,
>31	byte	1		compression type: gzip,
>31	byte	2		compression type: bzip2,
>31	byte	3		compression type: lzma,
>32	string	x		image name: %s

#IMG0 header, found in VxWorks-based Mercury router firmware
0	string		IMG0		IMG0 (VxWorks) header,
>4	belong		x		size: %d

#Mediatek bootloader signature
#From xp-dev.com
0	string		BOOTLOADER!	Mediatek bootloader

#CSYS header formats
0	string		CSYS\x00	CSYS header, little endian, 
>8	lelong		x		size: %d

0	string		CSYS\x80	CSYS header, big endian,
>8	belong		x		size: %d

# wrgg firmware image
0	string		wrgg02		WRGG firmware header,
>6	string		x		name: %s,
>48	string		x		root device: %s

# trx image file
0	string          HDR0            TRX firmware header, little endian, header size: 28 bytes, 
>4	lelong		x		image size: %d bytes,
>8	lelong		x		CRC32: 0x%X
>12	lelong		x		flags/version: 0x%X

0	string          0RDH            TRX firmware header, big endian, header size: 28 bytes,
>4	belong		x		image size: %d bytes,
>8	belong		x		CRC32: 0x%X
>12	belong		x		flags/version: 0x%X


# Ubicom firmware image
0	belong	0xFA320080		Ubicom firmware header,
>12	belong	x			checksum: 0x%X,
>24	belong	x			image size: %d

# The ROME bootloader is used by several RealTek-based products.
# Unfortunately, the magic bytes are specific to each product, so
# separate signatures must be created for each one.

# Netgear KWGR614 ROME image
0	string		G614		Realtek firmware header (ROME bootloader),
>4	beshort		0xd92f		image type: KFS,
>4	beshort		0xb162		image type: RDIR,
>4	beshort		0xea43		image type: BOOT,
>4	beshort		0x8dc9		image type: RUN,
>4	beshort		0x2a05		image type: CCFG,
>4	beshort		0x6ce8		image type: DCFG,
>4	beshort		0xc371		image type: LOG,
>6	byte		x		header version: %d,
#month
>10	byte		x		created: %d/
#day	
>12	byte 		x		\b%d/
#year
>8	beshort		x		\b%d,
>16	belong		x		image size: %d bytes,
>22	byte		x		body checksum: 0x%X,
>23	byte		x		header checksum: 0x%X

# Linksys WRT54GX ROME image
0	belong		0x59a0e842	Realtek firmware header (ROME bootloader)
>4      beshort         0xd92f          image type: KFS,
>4      beshort         0xb162          image type: RDIR,
>4      beshort         0xea43          image type: BOOT,
>4      beshort         0x8dc9          image type: RUN,
>4      beshort         0x2a05          image type: CCFG,
>4      beshort         0x6ce8          image type: DCFG,
>4      beshort         0xc371          image type: LOG,
>6      byte            x               header version: %d,
#month
>10     byte            x               created: %d/
#day    
>12     byte            x               \b%d/
#year
>8      beshort         x               \b%d,
>16     belong          x               image size: %d bytes,
>22     byte            x               body checksum: 0x%X,
>23     byte            x               header checksum: 0x%X

# PackImg tag, somtimes used as a delimiter between the kernel and rootfs in firmware images.
0	string		--PaCkImGs--	PackImg Tag,
>16	lelong		x		little endian size: %d bytes;
>16	belong		x		big endian size: %d bytes


#------------------------------------------------------------------------------
# Broadcom header format
#
0       string          BCRM            Broadcom header,
>4      lelong          x               number of sections: %d,
>>8     lelong          18              first section type: flash
>>8     lelong          19              first section type: disk
>>8     lelong          21              first section type: tag


# Berkeley Lab Checkpoint Restart (BLCR) checkpoint context files
# http://ftg.lbl.gov/checkpoint
0       string  Ck0\0\0R\0\0\0  BLCR
>16     lelong  1       x86
>16     lelong  3       alpha
>16     lelong  5       x86-64
>16     lelong  7       ARM
>8      lelong  x       context data (little endian, version %d)

0       string  \0\0\0C\0\0\0R  BLCR
>16     belong  2       SPARC
>16     belong  4       ppc
>16     belong  6       ppc64
>16     belong  7       ARMEB
>16     belong  8       SPARC64
>8      belong  x       context data (big endian, version %d)

# Aculab VoIP firmware
# From: Mark Brown <broonie@sirena.org.uk>
0       string  VoIP\ Startup\ and      Aculab VoIP firmware
>35     string  x       format %s

#------------------------------------------------------------------------------
# HP LaserJet 1000 series downloadable firmware file
0       string  \xbe\xefABCDEFGH        HP LaserJet 1000 series downloadable firmware

# From Albert Cahalan <acahalan@gmail.com>
# really le32 operation,destination,payloadsize (but quite predictable)
# 01 00 00 00 00 00 00 c0 00 02 00 00
0       string          \1\0\0\0\0\0\0\300\0\2\0\0      Marvell Libertas firmware

#---------------------------------------------------------------------------
# The following entries have been tested by Duncan Laurie <duncan@sun.com> (a
# lead Sun/Cobalt developer) who agrees that they are good and worthy of
# inclusion.

# Boot ROM images for Sun/Cobalt Linux server appliances
0       string  Cobalt\ Networks\ Inc.\nFirmware\ v     Paged COBALT boot rom
>38     string x        V%.4s

# New format for Sun/Cobalt boot ROMs is annoying, it stores the version code
# at the very end where file(1) can't get it.
0       string CRfs     COBALT boot rom data (Flat boot rom or file system)

#
# Motorola S-Records, from Gerd Truschinski <gt@freebsd.first.gmd.de>
0   string      S0          Motorola S-Record; binary data in text format

# --------------------------------
# Microsoft Xbox data file formats
0       string          XIP0            XIP, Microsoft Xbox data
0       string          XTF0            XTF, Microsoft Xbox data

#Windows CE
64	string		CECE		Windows CE RTOS

# --------------------------------
# ZynOS ROM header format
# From openwrt zynos.h.
6	string		SIG		ZynOS header, header size: 48 bytes,
>0	belong		x		load address 0x%X,
>9	byte		<0x7F		rom image type:
>>9	byte		<1		invalid,
>>9	byte		>7		invalid,
>>9	byte		1		ROMIMG,
>>9	byte		2		ROMBOOT,
>>9	byte		3		BOOTEXT,
>>9	byte		4		ROMBIN,
>>9	byte		5		ROMDIR,
>>9	byte		6		6,
>>9	byte		7		ROMMAP,
>9	byte		>0x7F		ram image type:
>>9	byte		>0x82		invalid,
>>9	byte		0x80		RAM,
>>9	byte		0x81		RAMCODE,
>>9	byte		0x82		RAMBOOT,
>10	belong		>0x40000000	invalid
>10	belong		<0		invalid
>10	belong		0		invalid
>10	belong		x		uncompressed size: %d,
>14	belong		>0x40000000	invalid
>14	belong		<0		invalid
>14	belong		0  		invalid
>14	belong		x		compressed size: %d,
>20	beshort		x		uncompressed checksum: 0x%X,
>22	beshort		x		compressed checksum: 0x%X,
>18	byte		x		flags: 0x%X,
>18	byte		&0x40		uncompressed checksum is valid,
>18	byte		&0x80		the binary is compressed,
>>18	byte		&0x20		compressed checksum is valid,
>41	belong		x		memory map table address: 0x%X

# Firmware header used by some VxWorks-based Cisco products
0	string		CI032.00	Cisco VxWorks firmware header,
>8	lelong		>1024		invalid
>8	lelong		<0		invalid
>8	lelong		x		header size: %d bytes,
>32	lelong		>1024		invalid
>32	lelong		<0		invalid
>32	lelong		x		number of files: %d,
>48	lelong		<0		invalid
>48	lelong		x		image size: %d,
>64	string		x		firmware version: %s

# Firmware header used by some TV's
0	string		FNIB		ZBOOT firmware header, header size: 32 bytes,
>8	lelong		x		load address: 0x%.8X,
>12	lelong		x		start address: 0x%.8X,
>16	lelong		x		checksum: 0x%.8X,
>20	lelong		x		version: 0x%.8X,
>24	lelong		<1		invalid
>24	lelong		x		image size: %d bytes

# Firmware header used by several D-Link routers (and probably others)
0               string  \x5e\xa3\xa4\x17
>(7.b+12)       string  \x5e\xa3\xa4\x17        DLOB firmware header,
>>12            string  x                       %s,
>>(7.b+40)      string  x                       %s

#-------------------------Kernels-------------------------------------

# Linux kernel boot images, from Albert Cahalan <acahalan@cs.uml.edu>
# and others such as Axel Kohlmeyer <akohlmey@rincewind.chemie.uni-ulm.de>
# and Nicolás Lichtmaier <nick@debian.org>
# All known start with: b8 c0 07 8e d8 b8 00 90 8e c0 b9 00 01 29 f6 29
514     string          HdrS            Linux kernel

